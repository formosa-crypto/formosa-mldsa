fn derive_seed_for_mask(
    reg ptr u8[32] k,
    reg ptr u8[32] randomness,
    reg ptr u8[MESSAGE_REPRESENTATIVE_SIZE] message_representative,
    #spill_to_mmx reg ptr u8[64] seed_for_mask
) -> reg ptr u8[64] {
    stack u8[SHAKE256_RATE] block;

    reg u256[7] state;
    reg u256 copied_32_bytes;

    copied_32_bytes = k.[:u256 0];
    block.[:u256 0] = copied_32_bytes;

    copied_32_bytes = randomness.[:u256 0];
    block.[:u256 32] = copied_32_bytes;

    // MESSAGE_REPRESENTATIVE_SIZE is always 64.
    copied_32_bytes = message_representative.[:u256 0];
    block.[:u256 64] = copied_32_bytes;

    copied_32_bytes = message_representative.[:u256 32];
    block.[:u256 96] = copied_32_bytes;

    block.[:u64 128] = 0;

    block.[128] = 0x1f;
    block.[SHAKE256_RATE - 1] = 0x80;

    state = __state_init_avx2();
    state = shake256_absorb_block(state, block);

    seed_for_mask = squeeze_64_bytes(seed_for_mask, state);

    return seed_for_mask;
}

inline fn __compute_signer_response_element(
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] s1_element,
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] verifier_challenge,
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] mask_element,
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] signer_response_element
) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
{
    stack u32[COEFFICIENTS_IN_POLYNOMIAL] cs1;

    cs1 = polynomial::pointwise_montgomery_multiply_and_reduce(cs1, s1_element, verifier_challenge);
    cs1 = polynomial::invert_ntt_montgomery(cs1);

    signer_response_element = polynomial::add(signer_response_element, cs1, mask_element);
    signer_response_element = polynomial::reduce32(signer_response_element);

    return signer_response_element;
}

#[sct="{ptr: public, val: transient} *
       {ptr: public, val: secret} *
       public * public *
       {ptr: public, val: secret} ->
       {ptr: public, val: transient}"]
inline
fn __sign_internal(
    #spill_to_mmx reg ptr u8[SIGNATURE_SIZE] signature,
    #secret reg ptr u8[SIGNING_KEY_SIZE] signing_key,
    reg u64 pointer_to_message,
    reg u64 message_size,
    #spill_to_mmx reg ptr u8[32] randomness
) -> reg ptr u8[SIGNATURE_SIZE]
{
    // parts of signing_key
    reg ptr u8[SEED_FOR_MATRIX_A_SIZE] seed_for_matrix_A;

    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s1;

    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2;
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] s2_element;

    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t0;
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t0_element;

    stack u32[ROWS_IN_MATRIX_A * COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] matrix_A;
    stack u8[MESSAGE_REPRESENTATIVE_SIZE] message_representative;

    reg u16 domain_separator_for_mask;
    stack u8[64] seed_for_mask;

    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] signer_response;

    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] hint;
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] hint_element;

    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] w0 w1;
    stack u8[ENCODED_COMMITMENT_SIZE] commitment_encoded;
    stack u32[COEFFICIENTS_IN_POLYNOMIAL] w0_minus_cs2;

    stack u8[COMMITMENT_HASH_SIZE] commitment_hash;

    stack u32[COEFFICIENTS_IN_POLYNOMIAL] verifier_challenge;

    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] mask;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] w;
    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] mask_as_ntt;

    stack u32[COEFFICIENTS_IN_POLYNOMIAL] cs2;

    stack u32[COEFFICIENTS_IN_POLYNOMIAL] ct0;
    stack u32[COEFFICIENTS_IN_POLYNOMIAL] w0_minus_cs2_plus_ct0;

    #public reg u8 exit_rejection_sampling_loop;

    reg u64 ones_in_hint total_ones_in_hint;
    reg u64 hint_elements_processed;
    stack u8 infinity_norm_check_result;

    reg u256 copied_32_bytes;

    reg u64 j;

    inline int i;

    () = #spill(signature, randomness, signing_key);
    #declassify seed_for_matrix_A = signing_key[0:32];
    matrix_A = sample::__matrix_A(seed_for_matrix_A);

    () = #unspill(signing_key);
    message_representative = __derive_message_representative(
        signing_key[64:VERIFICATION_KEY_HASH_SIZE],
        pointer_to_message,
        message_size);

    () = #unspill(randomness);
    () = #unspill(signing_key);
    seed_for_mask = derive_seed_for_mask(signing_key[32:32], randomness, message_representative, seed_for_mask);

    () = #unspill(signing_key);
    s1 = s1::__decode(s1, signing_key[START_OF_S1_IN_ENCODED_SIGNING_KEY: S1_ENCODED_SIZE]);
    s2 = s2::__decode(s2, signing_key[START_OF_S2_IN_ENCODED_SIGNING_KEY: S2_ENCODED_SIZE]);
    t0 = t0::decode(t0, signing_key[START_OF_T0_IN_ENCODED_SIGNING_KEY: T0_ENCODED_SIZE]);

    s1 = row_vector::ntt(s1);
    s2 = column_vector::ntt(s2);
    t0 = column_vector::ntt(t0);

    domain_separator_for_mask = 0;

    exit_rejection_sampling_loop = 0;

    // WARNING WARNING WARNING
    //
    // The |#declassify|s in this loop body are only present to allow the
    // constant-time checker to go over the whole code without erroring out and
    // validate those parts whose constant-timedness can be established through
    // type-checking alone.
    //
    // The security of this rejection sampling loop CANNOT be established through
    // type-checking alone, and requires proving work in EasyCrypt.
    while (exit_rejection_sampling_loop != 1) {
        mask, domain_separator_for_mask = sample::__mask(seed_for_mask, domain_separator_for_mask);

        // Do a deep copy of |mask| into |mask_as_ntt| using AVX2.
        // |mask| has COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL coefficients,
        // each of which occupies 32 bits, i.e. 4 bytes.
        j = 0;
        while (j < COLUMNS_IN_MATRIX_A * BYTES_PER_UNCOMPRESSED_POLYNOMIAL) {
            copied_32_bytes = mask.[:u256 j];
            mask_as_ntt.[:u256 j] = copied_32_bytes;

            j += 32;
        }

        mask_as_ntt = row_vector::ntt(mask_as_ntt);
        w = row_vector::__multiply_with_matrix_A(matrix_A, mask_as_ntt);
        w = column_vector::reduce32(w);
        w = column_vector::invert_ntt_montgomery(w);

        w = column_vector::__conditionally_add_modulus(w);
        #declassify w0, w1 = column_vector::__decompose(w);

        commitment_encoded = commitment::__encode(w1);

        () = #spill(domain_separator_for_mask);
        #declassify commitment_hash = __derive_commitment_hash(message_representative, commitment_encoded);

        verifier_challenge = sample::__challenge(verifier_challenge, commitment_hash);
        () = #unspill(domain_separator_for_mask);

        verifier_challenge = polynomial::ntt(verifier_challenge);

        infinity_norm_check_result = 0;
        for i = 0 to COLUMNS_IN_MATRIX_A {
            #declassify infinity_norm_check_result = infinity_norm_check_result;
            if (infinity_norm_check_result == 0) {
                signer_response[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                    __compute_signer_response_element(
                        s1[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                        verifier_challenge,
                        mask[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                        signer_response[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]
                    );
                infinity_norm_check_result =
                    polynomial::__check_infinity_norm(
                        signer_response[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                        (int) (GAMMA1 - BETA)
                    );
            }
        }

        total_ones_in_hint = 0;
        hint_elements_processed = 0;
        for i = 0 to ROWS_IN_MATRIX_A {
            #declassify infinity_norm_check_result = infinity_norm_check_result;
            if (infinity_norm_check_result == 0) {
                s2_element = s2[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
                cs2 = polynomial::pointwise_montgomery_multiply_and_reduce(cs2, s2_element, verifier_challenge);
                cs2 = polynomial::invert_ntt_montgomery(cs2);

                w0_minus_cs2 =
                    polynomial::subtract(
                        w0_minus_cs2,
                        w0[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                        cs2
                    );

                w0_minus_cs2 = polynomial::reduce32(w0_minus_cs2);

                infinity_norm_check_result = polynomial::__check_infinity_norm(w0_minus_cs2, (int) (GAMMA2 - BETA));
                #declassify infinity_norm_check_result = infinity_norm_check_result;

                if(infinity_norm_check_result == 0) {
                    t0_element = t0[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
                    ct0 = polynomial::pointwise_montgomery_multiply_and_reduce(ct0, t0_element, verifier_challenge);
                    ct0 = polynomial::invert_ntt_montgomery(ct0);
                    ct0 = polynomial::reduce32(ct0);
                    infinity_norm_check_result = polynomial::__check_infinity_norm(ct0, GAMMA2);
                    #declassify infinity_norm_check_result = infinity_norm_check_result;

                    if(infinity_norm_check_result == 0) {
                        #declassify total_ones_in_hint = total_ones_in_hint;
                        if (total_ones_in_hint <= MAX_ONES_IN_HINT) {
                            w0_minus_cs2_plus_ct0 = polynomial::add(w0_minus_cs2_plus_ct0, w0_minus_cs2, ct0);
                            hint_element = hint[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
                            hint_element, ones_in_hint = polynomial::__make_hint(hint_element, w0_minus_cs2_plus_ct0, w1[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]);

                            hint[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] = hint_element;
                            total_ones_in_hint += ones_in_hint;
                            hint_elements_processed += 1;
                        }
                    }
                }
            }
        }

        if (hint_elements_processed == ROWS_IN_MATRIX_A) {
            if (total_ones_in_hint <= MAX_ONES_IN_HINT) {
                exit_rejection_sampling_loop = 1;
            } else {
                exit_rejection_sampling_loop = 0;
            }
        } else {
            exit_rejection_sampling_loop = 0;
        }
    }


    () = #unspill(signature);
    #declassify hint = hint;
    #declassify commitment_hash = commitment_hash;
    #declassify signer_response = signer_response;
    signature = signature::__encode(signature, commitment_hash, signer_response, hint);

    return signature;
}

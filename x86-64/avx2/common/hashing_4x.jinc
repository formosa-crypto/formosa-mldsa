require "keccak_4x/api.jinc"

fn shake128_squeezeblock4x(
    reg ptr u256[25] state,
    reg ptr u8[SHAKE128_RATE] h0 h1 h2 h3
) ->
    reg ptr u256[25],
    reg ptr u8[SHAKE128_RATE],
    reg ptr u8[SHAKE128_RATE],
    reg ptr u8[SHAKE128_RATE],
    reg ptr u8[SHAKE128_RATE]
{
    reg u256 t256;
    reg u128 t128;
    inline int i;
    #msf reg u64 msf = #init_msf();

    state, msf = _KeccakF1600_StatePermute4x(state, msf);

    for i = 0 to (SHAKE128_RATE / 8) {
        t256 = state[i];
        t128 = (128u)t256;
        h0[:u64 i] = #VMOVLPD(t128);
        h1[:u64 i] = #VMOVHPD(t128);
        t128 = #VEXTRACTI128(t256, 1);
        h2[:u64 i] = #VMOVLPD(t128);
        h3[:u64 i] = #VMOVHPD(t128);
    }

    return state, h0, h1, h2, h3;
}

fn shake256_squeezeblock4x(
    reg ptr u256[25] state,
    reg ptr u8[SHAKE256_RATE] h0 h1 h2 h3
) ->
    reg ptr u256[25], // TODO: Possible strange behaviour when annotating this?
    reg ptr u8[SHAKE256_RATE],
    reg ptr u8[SHAKE256_RATE],
    reg ptr u8[SHAKE256_RATE],
    reg ptr u8[SHAKE256_RATE]
{
    reg u256 t256;
    stack u64[4] output_bytes;

    inline int i;
    #msf reg u64 msf = #init_msf();

    state, msf = _KeccakF1600_StatePermute4x(state, msf);

    for i = 0 to (SHAKE256_RATE / 8) {
        t256 = state[i];
        output_bytes.[:u256 0] = t256;

        h0[:u64 i] = output_bytes[0];
        h1[:u64 i] = output_bytes[1];
        h2[:u64 i] = output_bytes[2];
        h3[:u64 i] = output_bytes[3];
    }

    return state, h0, h1, h2, h3;
}

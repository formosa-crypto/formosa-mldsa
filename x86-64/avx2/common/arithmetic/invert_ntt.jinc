namespace polynomial {
    // ----------- Layer 0 -------------
    fn invert_at_layer_0(
        reg u64 start,
        reg u256 zetas,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u256 coeffs_i coeffs_i_plus_1;
        reg u256 low_values high_values;
        reg u256 differences sums;

        reg u64 coeffs_i_start coeffs_i_plus_1_start;

        coeffs_i_start = start;
        coeffs_i_start *= 32;
        coeffs_i = polynomial.[:u256 coeffs_i_start];
        coeffs_i = #VPSHUFD_256(coeffs_i, 0b11_01_10_00);

        coeffs_i_plus_1_start = coeffs_i_start;
        coeffs_i_plus_1_start += 32;
        coeffs_i_plus_1 = polynomial.[:u256 coeffs_i_plus_1_start];
        coeffs_i_plus_1 = #VPSHUFD_256(coeffs_i_plus_1, 0b11_01_10_00);

        low_values = #VPUNPCKL_4u64(coeffs_i, coeffs_i_plus_1);
        high_values = #VPUNPCKH_4u64(coeffs_i, coeffs_i_plus_1);

        differences = #VPSUB_8u32(high_values, low_values);
        sums = #VPADD_8u32(high_values, low_values);

        differences = montgomery_multiply_and_reduce(differences, zetas);

        coeffs_i = #VPUNPCKL_4u64(sums, differences);
        coeffs_i_plus_1 = #VPUNPCKH_4u64(sums, differences);

        coeffs_i = #VPSHUFD_256(coeffs_i, 0b11_01_10_00);
        coeffs_i_plus_1 = #VPSHUFD_256(coeffs_i_plus_1, 0b11_01_10_00);

        polynomial.[:u256 coeffs_i_start] = coeffs_i;
        polynomial.[:u256 coeffs_i_plus_1_start] = coeffs_i_plus_1;

        return polynomial;
    }
    fn invert_ntt_at_layer_0(
         reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 start;
        reg u256 zetas;

        inline int i;

        for i = 0 to 16 {
            start = i * 2;
            zetas = ZETAS_TO_INVERT_LAYER_0[i];
            polynomial = invert_at_layer_0(start, zetas, polynomial);
        }

        return polynomial;
    }

    // ----------- Layer 1 -------------
    fn invert_at_layer_1(
        reg u64 start,
        reg u256 zetas,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u256 coeffs_i coeffs_i_plus_1;
        reg u256 low_values high_values;
        reg u256 sums differences;

        reg u64 coeffs_i_start coeffs_i_plus_1_start;

        coeffs_i_start = start;
        coeffs_i_start *= 32;
        coeffs_i = polynomial.[:u256 coeffs_i_start];

        coeffs_i_plus_1_start = coeffs_i_start;
        coeffs_i_plus_1_start += 32;
        coeffs_i_plus_1 = polynomial.[:u256 coeffs_i_plus_1_start];

        low_values = #VPUNPCKL_4u64(coeffs_i, coeffs_i_plus_1);
        high_values = #VPUNPCKH_4u64(coeffs_i, coeffs_i_plus_1);

        differences = #VPSUB_8u32(high_values, low_values);
        sums = #VPADD_8u32(high_values, low_values);

        differences = montgomery_multiply_and_reduce(differences, zetas);

        coeffs_i = #VPUNPCKL_4u64(sums, differences);
        coeffs_i_plus_1 = #VPUNPCKH_4u64(sums, differences);

        polynomial.[:u256 coeffs_i_start] = coeffs_i;
        polynomial.[:u256 coeffs_i_plus_1_start] = coeffs_i_plus_1;

        return polynomial;
    }
    fn invert_ntt_at_layer_1(
         reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 start;
        reg u256 zetas;

        inline int i;

        for i = 0 to 16 {
            start = i * 2;
            zetas = ZETAS_TO_INVERT_LAYER_1[i];
            polynomial = invert_at_layer_1(start, zetas, polynomial);
        }

        return polynomial;
    }

    // ----------- Layer 2 -------------
    fn invert_at_layer_2(
        reg u64 start,
        reg u256 zetas,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u256 coeffs_i coeffs_i_plus_1;
        reg u256 low_values high_values;
        reg u256 sums differences;

        reg u64 coeffs_i_start coeffs_i_plus_1_start;

        coeffs_i_start = start;
        coeffs_i_start *= 32;
        coeffs_i = polynomial.[:u256 coeffs_i_start];

        coeffs_i_plus_1_start = coeffs_i_start;
        coeffs_i_plus_1_start += 32;
        coeffs_i_plus_1 = polynomial.[:u256 coeffs_i_plus_1_start];

        low_values = #VPERM2I128(coeffs_i, coeffs_i_plus_1, 0x20);
        high_values = #VPERM2I128(coeffs_i, coeffs_i_plus_1, 0x31);

        differences = #VPSUB_8u32(high_values, low_values);
        sums = #VPADD_8u32(high_values, low_values);

        differences = montgomery_multiply_and_reduce(differences, zetas);

        coeffs_i = #VPERM2I128(sums, differences, 0x20);
        coeffs_i_plus_1 = #VPERM2I128(sums, differences, 0x31);

        polynomial.[:u256 coeffs_i_start] = coeffs_i;
        polynomial.[:u256 coeffs_i_plus_1_start] = coeffs_i_plus_1;

        return polynomial;
    }
    fn invert_ntt_at_layer_2(
         reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 start;
        reg u256 zetas;

        inline int i;

        for i = 0 to 16 {
            start = i * 2;
            zetas = ZETAS_TO_INVERT_LAYER_2[i];
            polynomial = invert_at_layer_2(start, zetas, polynomial);
        }

        return polynomial;
    }

    // ----------- Helper for layers 3 and beyond -------------
    fn invert_ntt_round(
        reg u64 offset,
        reg u64 step_by,
        reg u32 zeta,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u256 a_minus_b;

        reg u64 index_i index_i_plus_step_by;
        reg u256 coeffs_i coeffs_i_plus_step_by;
        reg u256 zetas;

        zetas = (256u)#VMOV_32(zeta);
        zetas = #VPBROADCAST_8u32(zetas);

        reg u64 i;

        i = offset;
        offset += step_by;
        while (i < offset) {
            index_i = i;
            index_i *= 32;
            coeffs_i = polynomial.[:u256 index_i];

            index_i_plus_step_by = i;
            index_i_plus_step_by += step_by;
            index_i_plus_step_by *= 32;
            coeffs_i_plus_step_by = polynomial.[:u256 index_i_plus_step_by];

            a_minus_b = #VPSUB_8u32(coeffs_i_plus_step_by, coeffs_i);

            coeffs_i = #VPADD_8u32(coeffs_i, coeffs_i_plus_step_by);
            coeffs_i_plus_step_by = montgomery_multiply_and_reduce(a_minus_b, zetas);

            polynomial.[:u256 index_i] = coeffs_i;
            polynomial.[:u256 index_i_plus_step_by] = coeffs_i_plus_step_by;

            i += 1;
        }

        return polynomial;
    }

    // ----------- Layer 3 -------------
    fn invert_ntt_at_layer_3(
         reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int STEP = 8; // 1 << layer
        inline int STEP_BY = STEP / COEFFICIENTS_PER_YMM_REGISTER;

        reg u64 offset step_by;
        reg u32 zeta;

        inline int i;
        for i = 0 to 16 {
            offset = i * STEP * 2 / COEFFICIENTS_PER_YMM_REGISTER;
            step_by = STEP_BY;
            zeta = ZETAS_TO_INVERT_LAYER_3[i];
            polynomial = invert_ntt_round(offset, step_by, zeta, polynomial);
        }

        return polynomial;
    }

    // ----------- Layer 4 -------------
    fn invert_ntt_at_layer_4(
         reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int STEP = 16; // 1 << layer
        inline int STEP_BY = STEP / COEFFICIENTS_PER_YMM_REGISTER;

        reg u64 offset step_by;
        reg u32 zeta;

        inline int i;
        for i = 0 to 8 {
            offset = i * STEP * 2 / COEFFICIENTS_PER_YMM_REGISTER;
            step_by = STEP_BY;
            zeta = ZETAS_TO_INVERT_LAYER_4[i];
            polynomial = invert_ntt_round(offset, step_by, zeta, polynomial);
        }

        return polynomial;
    }

    // ----------- Layer 5 -------------
    fn invert_ntt_at_layer_5(
         reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int STEP = 32; // 1 << layer
        inline int STEP_BY = STEP / COEFFICIENTS_PER_YMM_REGISTER;

        reg u64 offset step_by;
        reg u32 zeta;

        inline int i;
        for i = 0 to 4 {
            offset = i * STEP * 2 / COEFFICIENTS_PER_YMM_REGISTER;
            step_by = STEP_BY;
            zeta = ZETAS_TO_INVERT_LAYER_5[i];
            polynomial = invert_ntt_round(offset, step_by, zeta, polynomial);
        }

        return polynomial;
    }

    // ----------- Layer 6 -------------
    fn invert_ntt_at_layer_6(
         reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int STEP = 64; // 1 << layer
        inline int STEP_BY = STEP / COEFFICIENTS_PER_YMM_REGISTER;

        reg u64 offset step_by;
        reg u32 zeta;

        inline int i;
        for i = 0 to 2 {
            offset = i * STEP * 2 / COEFFICIENTS_PER_YMM_REGISTER;
            step_by = STEP_BY;
            zeta = ZETAS_TO_INVERT_LAYER_6[i];
            polynomial = invert_ntt_round(offset, step_by, zeta, polynomial);
        }

        return polynomial;
    }

    // ----------- Layer 7 -------------
    fn invert_ntt_at_layer_7(
         reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int STEP = 128; // 1 << layer
        inline int STEP_BY = STEP / COEFFICIENTS_PER_YMM_REGISTER;

        reg u64 offset step_by;
        reg u32 zeta;

        inline int i;

        for i = 0 to 1 {
            offset = i * STEP * 2 / COEFFICIENTS_PER_YMM_REGISTER;
            step_by = STEP_BY;
            zeta = 25847;
            polynomial = invert_ntt_round(offset, step_by, zeta, polynomial);
        }

        return polynomial;
    }

    fn invert_ntt_montgomery(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u256 coefficients twiddle_factors;
        reg u64 i temp;

        polynomial = invert_ntt_at_layer_0(polynomial);
        polynomial = invert_ntt_at_layer_1(polynomial);
        polynomial = invert_ntt_at_layer_2(polynomial);
        polynomial = invert_ntt_at_layer_3(polynomial);
        polynomial = invert_ntt_at_layer_4(polynomial);
        polynomial = invert_ntt_at_layer_5(polynomial);
        polynomial = invert_ntt_at_layer_6(polynomial);
        polynomial = invert_ntt_at_layer_7(polynomial);

        temp = 41_978;
        twiddle_factors = (256u)#VMOV_32(temp);
        twiddle_factors = #VPBROADCAST_8u32(twiddle_factors);

        i = 0;
        while(i < BYTES_PER_UNCOMPRESSED_POLYNOMIAL) {
            coefficients = polynomial.[:u256 i];

            coefficients = montgomery_multiply_and_reduce(coefficients, twiddle_factors);
            polynomial.[:u256 i] = coefficients;

            i += 32;
        }

        return polynomial;
    }
}

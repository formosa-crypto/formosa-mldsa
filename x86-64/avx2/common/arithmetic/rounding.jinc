namespace polynomial {
    inline
    fn __make_hint(
        #spill_to_mmx reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] hints,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] low_coefficients high_coefficients
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL], reg u64
    {
        reg u256 hint_block;
        reg u256 low abs_low high;
        reg u256 gamma2 minus_gamma2;
        reg u256 low_out_of_bounds;
        reg u256 low_equals_minus_gamma2_and_high_is_nonzero;

        reg u64 offset temp;
        reg u64 num_hints weight;

        temp = GAMMA2;
        gamma2 = (256u)#VMOV_64(temp);
        gamma2 = #VPBROADCAST_8u32(gamma2);

        temp = -GAMMA2;
        minus_gamma2 = (256u)#VMOV_64(temp);
        minus_gamma2 = #VPBROADCAST_8u32(minus_gamma2);

        weight = 0;
        offset = 0;
        while (offset < BYTES_PER_UNCOMPRESSED_POLYNOMIAL) {
            low = low_coefficients.[:u256 offset];
            high = high_coefficients.[:u256 offset];

            abs_low = #VPABS_8u32(low);
            low_out_of_bounds = #VPCMPGT_8u32(abs_low, gamma2);

            low_equals_minus_gamma2_and_high_is_nonzero = #VPCMPEQ_8u32(low, minus_gamma2);
            low_equals_minus_gamma2_and_high_is_nonzero =
                #VPSIGN_8u32(
                    low_equals_minus_gamma2_and_high_is_nonzero,
                    high);

            hint_block = #VPOR_256(
                low_out_of_bounds,
                low_equals_minus_gamma2_and_high_is_nonzero
            );

            // TODO: We could also handle serializing the hint here.
            #declassify hint_block = hint_block;
            num_hints = (64u)#MOVEMASK_8u32(hint_block);
            _, _, _, _, _, num_hints = #POPCNT_64(num_hints);

            hint_block = #VPSRL_8u32(hint_block, 31);
            hints.[:u256 offset] = hint_block;
            offset += 32;

            weight += num_hints;
        }

        return hints, weight;
    }

    inline
    fn __power2round(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] highbits,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] lowbits,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL],
         reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u256 coefficients;
        reg u256 high low;
        reg u256 half_t0_bits ones_vector;

        reg u64 offset temp;

        half_t0_bits = HALF_OF_BITS_IN_T0_VECTOR;

        temp = 1;
        ones_vector = (256u)#VMOV_64(temp);
        ones_vector = #VPBROADCAST_8u32(ones_vector);

        offset = 0;
        while (offset < BYTES_PER_UNCOMPRESSED_POLYNOMIAL) {
            coefficients = polynomial.[:u256 offset];

            high = #VPADD_8u32(coefficients, half_t0_bits);
            high = #VPSUB_8u32(high, ones_vector);
            high = #VPSRA_8u32(high, BITS_IN_LOWER_PART_OF_T);

            low = #VPSLL_8u32(high, BITS_IN_LOWER_PART_OF_T);
            low = #VPSUB_8u32(coefficients, low);

            highbits.[:u256 offset] = high;
            lowbits.[:u256 offset] = low;

            offset += 32;
        }

        return highbits, lowbits;
    }
}

u256 CONST_0123 = (4u64)[3, 2, 1, 0];

fn absorb_for_shake256_4x(
    reg ptr u256[25] state,
    reg ptr u8[64] rho_prime,
    reg u16 starting_domain_separator
) -> reg ptr u256[25]
{
    reg u256 t256 zeros;
    reg u64 t64;

    inline int i lane;

    zeros = #set0_256();
    for i = 0 to 25 {
        state[i] = zeros;
    }

    for i = 0 to 8 {
        t64 = rho_prime.[:u64 8 * i];
        t256 = (256u)t64;
        t256 = #VPBROADCAST_4u64(t256);
        state[i] = t256;
    }

    for lane = 0 to 4 {
        t64 = (64u)starting_domain_separator;
        t64 = #LEA_64(0x1F0000 + t64);

        t256 = (256u)t64;
        t256 = #VPBROADCAST_4u64(t256);
        t256 = #VPADD_4u64(t256, CONST_0123);
        state[8] = t256;
    }

    t64 = 0x8000000000000000;
    t256 = (256u)t64;
    t256 = #VPBROADCAST_4u64(t256);
    state[16] = t256;

    return state;
}

// We calculate ceil(a/b) = floor((a + b - 1) / b) where:
// a = ENCODED_GAMMA1_POLYNOMIAL_SIZE
// b = SHAKE256_RATE
param int BLOCKS_TO_SQUEEZE =
    (ENCODED_GAMMA1_POLYNOMIAL_SIZE + SHAKE256_RATE - 1) / SHAKE256_RATE;
param int EXPAND_TO_BUFFER_SIZE =
    BLOCKS_TO_SQUEEZE * SHAKE256_RATE;

fn shake256_squeeze_multiple_blocks_4x(
    reg ptr u256[25] state,
    reg ptr u8[EXPAND_TO_BUFFER_SIZE] b0 b1 b2 b3
) ->
    reg ptr u256[25],
    reg ptr u8[EXPAND_TO_BUFFER_SIZE],
    reg ptr u8[EXPAND_TO_BUFFER_SIZE],
    reg ptr u8[EXPAND_TO_BUFFER_SIZE],
    reg ptr u8[EXPAND_TO_BUFFER_SIZE]
{
    inline int i;

    for i = 0 to BLOCKS_TO_SQUEEZE
    {
        state,
        b0[i*SHAKE256_RATE:SHAKE256_RATE],
        b1[i*SHAKE256_RATE:SHAKE256_RATE],
        b2[i*SHAKE256_RATE:SHAKE256_RATE],
        b3[i*SHAKE256_RATE:SHAKE256_RATE]
        =
        __shake256_squeezeblock4x(
            state,
            b0[i*SHAKE256_RATE:SHAKE256_RATE],
            b1[i*SHAKE256_RATE:SHAKE256_RATE],
            b2[i*SHAKE256_RATE:SHAKE256_RATE],
            b3[i*SHAKE256_RATE:SHAKE256_RATE]
        );
    }

    return state, b0, b1, b2, b3;
}

inline
fn sample_mask_polynomial_4x(
    reg ptr u8[64] rho_prime,
    reg u16 starting_domain_separator
) -> stack u32[COEFFICIENTS_IN_POLYNOMIAL],
     stack u32[COEFFICIENTS_IN_POLYNOMIAL],
     stack u32[COEFFICIENTS_IN_POLYNOMIAL],
     stack u32[COEFFICIENTS_IN_POLYNOMIAL]
{
    stack u256[25] xof_state;

    stack u8[EXPAND_TO_BUFFER_SIZE] mask_encoded0 mask_encoded1 mask_encoded2 mask_encoded3;
    stack u32[COEFFICIENTS_IN_POLYNOMIAL] mask0 mask1 mask2 mask3;

    xof_state = absorb_for_shake256_4x(xof_state, rho_prime, starting_domain_separator);
    xof_state, mask_encoded0, mask_encoded1, mask_encoded2, mask_encoded3 =
        shake256_squeeze_multiple_blocks_4x(
            xof_state,
            mask_encoded0,
            mask_encoded1,
            mask_encoded2,
            mask_encoded3
        );

    mask0 = gamma1::decode_to_polynomial(mask0, mask_encoded0[0 : ENCODED_GAMMA1_POLYNOMIAL_SIZE]);
    mask1 = gamma1::decode_to_polynomial(mask1, mask_encoded1[0 : ENCODED_GAMMA1_POLYNOMIAL_SIZE]);
    mask2 = gamma1::decode_to_polynomial(mask2, mask_encoded2[0 : ENCODED_GAMMA1_POLYNOMIAL_SIZE]);
    mask3 = gamma1::decode_to_polynomial(mask3, mask_encoded3[0 : ENCODED_GAMMA1_POLYNOMIAL_SIZE]);

    return mask0, mask1, mask2, mask3;
}

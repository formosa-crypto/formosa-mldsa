inline
fn __absorb_to_generate_challenges(
    reg ptr u8[COMMITMENT_HASH_SIZE] commitment_hash
) -> stack u64[25] {
    stack u64[25] state;

    reg u8 byte;

    inline int i;

    state = __keccak_init_ref1(state);

    for i = 0 to COMMITMENT_HASH_SIZE {
        byte = commitment_hash[i];
        state[:u8 i] = byte;
    }
    state[:u8 COMMITMENT_HASH_SIZE] = 0x1f;
    state[:u8 SHAKE256_RATE - 1] = 0x80;

    return state;
}

namespace sample {
    inline
    fn __challenge(
        #spill_to_mmx reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] output_challenge,
        reg ptr u8[COMMITMENT_HASH_SIZE] seed
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u64[25] state;

        reg u64 i;
        reg u64 sample_at;
        reg u64 signs xof_offset;
        reg u64 byte;
        reg u32 coefficient shift;

        inline int j;

        state = __absorb_to_generate_challenges(seed);

        () = #spill(output_challenge);
        state = _keccakf1600_ref1(state);
        () = #unspill(output_challenge);

        signs = 0;
        for j = 0 to 8 {
            byte = (64u)state[:u8 j];
            byte <<= 8 * j;

            signs |= byte;
        }
        xof_offset = 8;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            output_challenge[i] = 0;
            i += 1;
        }

        i = COEFFICIENTS_IN_POLYNOMIAL - ONES_IN_VERIFIER_CHALLENGE;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            while {
                if(xof_offset >= SHAKE256_RATE) {
                    () = #spill(output_challenge, i, signs);
                    state = _keccakf1600_ref1(state);
                    () = #unspill(output_challenge, i, signs);

                    xof_offset = 0;
                }
                #declassify sample_at = (64u) state[:u8 xof_offset];
                _ = #init_msf();

                xof_offset += 1;
            } (sample_at > i)

            coefficient = output_challenge[sample_at];
            output_challenge[i] = coefficient;

            // output_challenge[sample_at] = 1 - 2 * (signs & 1);
            shift = (32u)signs;
            shift &= 1;
            shift <<= 1;

            coefficient = 1;
            coefficient -= shift;

            output_challenge[sample_at] = coefficient;

            signs >>= 1;

            i += 1;
        }

        return output_challenge;
    }
}

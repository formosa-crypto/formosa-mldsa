namespace s2 {
    inline
    fn encode(
        reg ptr u8[S2_ENCODED_SIZE] encoded,
        #spill_to_mmx reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2
    ) -> reg ptr u8[S2_ENCODED_SIZE]
    {
        inline int i;

        () = #spill(s2);

        for i = 0 to ROWS_IN_MATRIX_A {
            encoded[ENCODED_ERROR_POLYNOMIAL_SIZE * i : ENCODED_ERROR_POLYNOMIAL_SIZE] =
                error_polynomial::encode(
                    encoded[ENCODED_ERROR_POLYNOMIAL_SIZE * i : ENCODED_ERROR_POLYNOMIAL_SIZE],
                    s2[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL]
                );

            () = #unspill(s2);
        }
        return encoded;
    }

    inline
    fn decode(
        reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2,
        #spill_to_mmx reg ptr u8[S2_ENCODED_SIZE] encoded
    ) -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        () = #spill(encoded);

        inline int i;
        for i = 0 to ROWS_IN_MATRIX_A {
            s2[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                error_polynomial::decode(
                    s2[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                    encoded[ENCODED_ERROR_POLYNOMIAL_SIZE * i : ENCODED_ERROR_POLYNOMIAL_SIZE]
                );
            () = #unspill(encoded);
        }

        return s2;
    }
}

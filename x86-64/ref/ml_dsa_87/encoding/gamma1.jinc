require "../parameters.jinc"

namespace gamma1 {
    inline
    fn encode_polynomial(
        reg ptr u8[ENCODED_GAMMA1_POLYNOMIAL_SIZE] encoded,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u8[ENCODED_GAMMA1_POLYNOMIAL_SIZE]
    {
        reg u64 i;
        reg u32 encoded_bytes;
        reg u8 byte;
        reg u32 t0 t1;
        reg u64 output_offset;

        output_offset = 0;

        i = 0;
        while (i < COEFFICIENTS_IN_POLYNOMIAL / 2) {
            // t0 = GAMMA1 - polynomial[2*i + 0];
            t0 = GAMMA1;
            t0 -= polynomial[2*i + 0];

            // t1 = GAMMA1 - polynomial[2*i+1];
            t1 = GAMMA1;
            t1 -= polynomial[2*i + 1];

            // encoded[5*i + 0] = t0;
            encoded_bytes = t0;
            encoded[output_offset] = (8u)encoded_bytes;

            // encoded[5*i + 1]  = t0 >> 8;
            encoded_bytes = t0;
            encoded_bytes >>= 8;
            encoded[output_offset + 1] = (8u)encoded_bytes;

            // encoded[5*i + 2]  = t0 >> 16;
            encoded_bytes = t0;
            encoded_bytes >>= 16;
            byte = (8u)encoded_bytes;

            // encoded[5*i + 2] |= t1 << 4;
            encoded_bytes = t1;
            encoded_bytes <<= 4;
            byte |= (8u)encoded_bytes;
            encoded[output_offset + 2] = byte;

            // encoded[5*i + 3]  = t1 >> 4;
            encoded_bytes = t1;
            encoded_bytes >>= 4;
            encoded[output_offset + 3] = (8u)encoded_bytes;

            // encoded[5*i + 4]  = t1 >> 12;
            encoded_bytes = t1;
            encoded_bytes >>= 12;
            encoded[output_offset + 4] = (8u)encoded_bytes;

            output_offset += 5;
            i += 1;
        }

        return encoded;
    }

    inline
    fn decode_to_polynomial(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial,
        reg ptr u8[ENCODED_GAMMA1_POLYNOMIAL_SIZE] bytes
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u32 coefficient temp;

        reg u64 input_offset = 0;
        reg u64 output_offset = 0;

        while(input_offset < ENCODED_GAMMA1_POLYNOMIAL_SIZE) {
            // polynomial[2*i+0]  = bytes[5*i+0];
            // polynomial[2*i+0] |= (uint32_t)bytes[5*i+1] << 8;
            // polynomial[2*i+0] |= (uint32_t)bytes[5*i+2] << 16;
            // polynomial[2*i+0] = GAMMA1 - polynomial[2*i+0];

            coefficient = (32u) bytes[input_offset];
            temp = (32u) bytes[input_offset + 1];
            temp <<= 8;
            coefficient |= temp;

            temp = (32u) bytes[input_offset + 2];
            temp <<= 16;
            coefficient |= temp;

            coefficient &= 0xFFFFF;
            coefficient = -coefficient;
            coefficient += GAMMA1;
            polynomial[output_offset + 0] = coefficient;

            // polynomial[2*i+1]  = bytes[5*i+2] >> 4;
            // polynomial[2*i+1] |= (uint32_t)bytes[5*i+3] << 4;
            // polynomial[2*i+1] |= (uint32_t)bytes[5*i+4] << 12;
            // polynomial[2*i+1] = GAMMA1 - polynomial[2*i+1];

            coefficient = (32u) bytes[input_offset + 2];
            coefficient >>= 4;

            temp = (32u) bytes[input_offset + 3];
            temp <<= 4;
            coefficient |= temp;

            temp = (32u) bytes[input_offset + 4];
            temp <<= 12;
            coefficient |= temp;

            coefficient = -coefficient;
            coefficient += GAMMA1;
            polynomial[output_offset + 1] = coefficient;

            // Update counters
            input_offset += 5;
            output_offset += 2;
        }

        return polynomial;
    }

    inline
    fn decode(
        reg ptr u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] decoded,
        reg ptr u8[GAMMA1_ENCODED_SIZE] encoded
    ) -> reg ptr u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int i;

        for i = 0 to COLUMNS_IN_MATRIX_A {

            decoded[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                decode_to_polynomial(
                    decoded[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                    encoded[i * ENCODED_GAMMA1_POLYNOMIAL_SIZE : ENCODED_GAMMA1_POLYNOMIAL_SIZE]
                );
        }

        return decoded;
    }
}

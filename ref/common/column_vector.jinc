from Common require "arithmetic/ntt.jinc"

require "polynomial.jinc"

// A column vector has dimensions ROWS_IN_MATRIX_A * 1
namespace column_vector {
    fn reduce32(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector)
        -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] {
        inline int i;

        for i = 0 to ROWS_IN_MATRIX_A {
            vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                polynomial::reduce32(vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]);
        }

        return vector;

    }

    fn ntt(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector)
        -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] {
        inline int i;

        for i = 0 to ROWS_IN_MATRIX_A {
            vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                polynomial::ntt(
                    vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]
                );
        }

        return vector;
    }
    fn invert_ntt_montgomery(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector)
    -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int i;

        for i = 0 to ROWS_IN_MATRIX_A {
            vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                polynomial::invert_ntt_montgomery(
                    vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]
                );
        }

        return vector;
    }

    inline
    fn power2round(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] v)
        -> stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL], stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t1 t0;
        #spill_to_mmx reg u64 i;
        reg u32 x y1 y2;

        i = 0;
        while(i < ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL) {
            x = v[i];

            () = #spill(i);
            y1, y2 = coefficient::power2round(x);
            () = #unspill(i);

            t1[i] = y1;
            t0[i] = y2;
            i += 1;
        }

        return t1, t0;
    }

    inline
    fn add(
        #spill_to_mmx reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] lhs rhs
    ) -> stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] sum;

        inline int i;

        () = #spill(lhs, rhs);

        for i = 0 to ROWS_IN_MATRIX_A {
            sum[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] =
                polynomial::add(
                    lhs[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL],
                    rhs[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL],
                    sum[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL]
                );
            () = #unspill(lhs, rhs);
        }
        return sum;
    }

    inline
    fn conditionally_add_modulus(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector)
        -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int i;
        for i = 0 to ROWS_IN_MATRIX_A {
            vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                polynomial::conditionally_add_modulus(vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]);
        }

        return vector;
    }

    inline
    fn decompose(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector)
    -> stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL],
       stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] low high;
        reg u32 coefficient low_bits high_bits;
        reg u64 i;

        i = 0;
        while(i < ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL) {
            coefficient = vector[i];

            low_bits, high_bits = coefficient::decompose(coefficient);

            low[i] = low_bits;
            high[i] = high_bits;

            i += 1;
        }

        return low, high;
    }

    inline
    fn multiply_by_polynomial(
        #spill_to_mmx reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector,
        #spill_to_mmx reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] poly
    ) -> stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] product;

        () = #spill(vector, poly);

        inline int i;
        for i = 0 to ROWS_IN_MATRIX_A {
            product[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                polynomial::pointwise_montgomery_product(
                    vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                    poly,
                    product[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]
                );
            () = #unspill(vector, poly);
        }

        return product;
    }

    inline
    fn subtract(stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] lhs rhs)
        -> stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] difference;

        inline int i;

        for i = 0 to ROWS_IN_MATRIX_A {
            difference[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] =
                polynomial::subtract(
                    lhs[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL],
                    rhs[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL],
                    difference[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL]
                );
        }

        return difference;
    }

    inline
    fn check_infinity_norm(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector,
                           inline int threshold
    ) -> reg u8
    {
        reg u8 ret;
        reg u8 result;

        inline int i;

        result = 0;
        for i = 0 to ROWS_IN_MATRIX_A {
            ret = polynomial::check_infinity_norm(
                    vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                    threshold
            );
            result |= ret;
        }

        return result;
    }

    inline
    fn make_hint(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] addend original)
        -> stack u32, stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u32 ones_in_hint ones_in_hint_vector;
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] hint_vector;

        inline int i;

        ones_in_hint_vector = 0;
        for i = 0 to ROWS_IN_MATRIX_A {
            ones_in_hint,
            hint_vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]
                = polynomial::make_hint(
                      addend[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                      original[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                      hint_vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]
                  );

            ones_in_hint_vector += ones_in_hint;
        }

        return ones_in_hint_vector, hint_vector;
    }

}

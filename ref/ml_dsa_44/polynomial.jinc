require "parameters.jinc"
require "arithmetic/modular.jinc"

namespace polynomial {
    fn add(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] lhs rhs sum)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
        reg u32 lhs_coefficient rhs_coefficient;

        reg u64 i;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            lhs_coefficient = lhs[i];
            rhs_coefficient = rhs[i];
            lhs_coefficient += rhs_coefficient;

            sum[i] = lhs_coefficient;

            i += 1;
        }
        return sum;
    }

    fn subtract(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] lhs rhs difference)
    -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
        reg u32 lhs_coefficient rhs_coefficient;

        reg u64 i;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            lhs_coefficient = lhs[i];
            rhs_coefficient = rhs[i];

            lhs_coefficient -= rhs_coefficient;
            difference[i] = lhs_coefficient;
            i += 1;
        }
        return difference;
    }

    fn sum_coefficients(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f sum)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u32 v32 result;

        reg u64 i;
        ?{}, i = #set0_64();
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            v32 = f[i];
            result = sum[i];
            result += v32;
            sum[i] = result;
            i += 1;
        }
        return sum;
    }

    fn pointwise_montgomery_product(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] lhs rhs product)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
        reg u64 lhs_coefficient rhs_coefficient;
        reg u32 product_reduced;

        reg u64 i;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            lhs_coefficient = (64s)lhs[i];
            rhs_coefficient = (64s)rhs[i];

            lhs_coefficient *= rhs_coefficient;
            product_reduced = montgomery_reduce(lhs_coefficient);

            product[i] = product_reduced;
            i += 1;
        }

        return product;
    }

    fn zero(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
        reg u64 i;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            // Montgomery of 0 is 0
            polynomial[i] = 0;
            i += 1;
        }

        return polynomial;
    }

    fn conditionally_add_modulus(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 i;
        reg u32 val;
        ?{}, i = #set0_64();
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            val = f[i];
            val = coefficient::conditionally_add_modulus(val);
            f[i] = val;
            i += 1;
        }
        return f;
    }

    inline
    fn check_infinity_norm(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial, inline int threshold)
        -> reg u8
    {
        reg u8 ret;
        reg u8 result;
        reg u32 coefficient;

        reg u64 i;

        result = 0;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            coefficient = polynomial[i];
            ret = coefficient::check_norm(coefficient, threshold);
            result |= ret;
            i += 1;
        }

        return result;
    }

    inline
    fn make_hint(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f0 f1 hints)
        -> reg u32, reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u32 weight a0 a1 hint;
        reg u64 i;

        reg u64 msf = #init_msf();

        inline bool condition;

        weight = 0;
        i = 0;
        while {condition = i < COEFFICIENTS_IN_POLYNOMIAL;} (condition) {
            msf = #update_msf(condition, msf);

            a0 = f0[i];
            a0 = #protect_32(a0, msf);

            a1 = f1[i];
            a1 = #protect_32(a1, msf);

            hint, msf = coefficient::make_hint(a0, a1, msf);
            hints[i] = hint;
            weight += hint;
            i += 1;
        }

        return weight, hints;
    }

    fn reduce32(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 i;
        reg u32 coeff reduced;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            coeff = polynomial[i];
            reduced = coefficient::reduce32(coeff);
            polynomial[i] = reduced;

            i += 1;
        }

        return polynomial;
    }

    inline
    fn shift_coefficients_left(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
        reg u64 i;
        reg u32 coefficient;

        i = 0;
        while (i < COEFFICIENTS_IN_POLYNOMIAL) {
            coefficient = polynomial[i];
            coefficient <<= BITS_IN_LOWER_PART_OF_T;
            polynomial[i] = coefficient;
            i += 1;
        }

        return polynomial;
    }

    fn use_hints(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] commitment hints
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 i;
        reg u32 a h;

        reg u64 msf = #init_msf();

        inline bool b;

        i = 0;
        while { b = i < COEFFICIENTS_IN_POLYNOMIAL; } (b) {
            msf = #update_msf(b, msf);

            h = hints[i];
            h = #protect_32(h, msf);

            a = commitment[i];
            a = #protect_32(a, msf);

            a, msf = coefficient::use_hint(a, h, msf);

            commitment[i] = a;

            i += 1;
        }

        return commitment;
    }
}

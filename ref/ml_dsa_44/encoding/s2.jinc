require "../parameters.jinc"

require "error_polynomial.jinc"

namespace s2 {
    inline
    fn encode(
        reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2,
        reg ptr u8[S2_ENCODED_SIZE] encoded
    ) -> reg ptr u8[S2_ENCODED_SIZE]
    {
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] poly;

        inline int i;
        for i = 0 to ROWS_IN_MATRIX_A {
            poly = s2[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];
            encoded[ENCODED_ERROR_POLYNOMIAL_SIZE * i : ENCODED_ERROR_POLYNOMIAL_SIZE] = error_polynomial::encode(poly, encoded[ENCODED_ERROR_POLYNOMIAL_SIZE * i : ENCODED_ERROR_POLYNOMIAL_SIZE]);
        }
        return encoded;
    }

    inline
    fn decode(
        reg ptr u8[S2_ENCODED_SIZE] encoded,
        reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2
    ) -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg ptr u8[ENCODED_ERROR_POLYNOMIAL_SIZE] encoded_polynomial;

        inline int i;
        for i = 0 to ROWS_IN_MATRIX_A {
            encoded_polynomial = encoded[ENCODED_ERROR_POLYNOMIAL_SIZE * i : ENCODED_ERROR_POLYNOMIAL_SIZE];
            s2[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] = error_polynomial::decode(s2[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL], encoded_polynomial);
        }

        return s2;
    }
}

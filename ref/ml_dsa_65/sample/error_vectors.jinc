inline
fn absorb_to_generate_errors(
    reg ptr u64[25] state,
    reg ptr u8[SEED_FOR_ERROR_VECTORS_SIZE] rho_prime,
    reg u16 index
) -> stack u64[25] {
    reg u8 byte;
    reg u64 i;

    state = __keccak_init_ref1(state);

    i = 0;
    while(i < SEED_FOR_ERROR_VECTORS_SIZE) {
        byte = rho_prime[i];
        state[u8 i] = byte;
        i += 1;
    }

    state[u8 SEED_FOR_ERROR_VECTORS_SIZE] = (8u)index;

    // This can be set to 0 since index is never greater than
    // ROWS_IN_MATRIX_A + COLUMNS_IN_MATRIX_A.
    state[u8 65] = 0;

    state[u8 66] = 0x1f;
    state[u8 SHAKE256_RATE - 1] = 0x80;

    return state;
}

fn rejection_sample_less_than_eta(
    reg ptr u64[25] state,
    #spill_to_mmx reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] error,
    #spill_to_mmx reg u64 sampled
) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL], reg u64
{
    reg u64 xof_offset;
    #public reg u32 try_coefficient temp;
    reg u8 byte;

    inline bool b;

    reg u64 msf = #init_msf();

    xof_offset = 0;

    while { b = xof_offset < SHAKE256_RATE; } (b) {
        msf = #update_msf(b, msf);

        b = sampled < COEFFICIENTS_IN_POLYNOMIAL;
        if (b) {
            msf = #update_msf(b, msf);

            byte = state[u8 xof_offset];

            #declassify try_coefficient = (32u)byte;
            try_coefficient &= 0x0F;

            try_coefficient = #protect_32(try_coefficient, msf);

            b = try_coefficient < 9;
            if (b) {
                msf = #update_msf(b, msf);

                temp = ETA;
                temp -= try_coefficient;
                error[sampled] = temp;

                sampled += 1;
            } else {
                msf = #update_msf(!b, msf);
            }

            b = sampled < COEFFICIENTS_IN_POLYNOMIAL;
            if (b) {
                msf = #update_msf(b, msf);

                #declassify try_coefficient = (32u)byte;
                try_coefficient >>= 4;
                try_coefficient = #protect_32(try_coefficient, msf);

                b = try_coefficient < 9;
                if (b) {
                    msf = #update_msf(b, msf);

                    temp = ETA;
                    temp -= try_coefficient;
                    error[sampled] = temp;

                    sampled += 1;
                } else {
                    msf = #update_msf(!b, msf);
                }
            } else {
                msf = #update_msf(!b, msf);
            }

        } else {
            msf = #update_msf(!b, msf);
        }

        xof_offset += 1;
    }

    return error, sampled;
}

inline
fn sample_error_polynomial(
    reg ptr u8[SEED_FOR_ERROR_VECTORS_SIZE] rho_prime,
    inline int i,
    #spill_to_mmx reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] error
) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
{
    #spill_to_mmx reg u64 coefficients_sampled;
    stack u64[25] state;

    () = #spill(error);
    state = absorb_to_generate_errors(state, rho_prime, i);
    state = _keccakf1600_ref1(state);
    () = #unspill(error);

    coefficients_sampled = 0;
    error, coefficients_sampled = rejection_sample_less_than_eta(state, error, coefficients_sampled);

    while (coefficients_sampled < COEFFICIENTS_IN_POLYNOMIAL) {
        () = #spill(coefficients_sampled, error);
        state = _keccakf1600_ref1(state);
        () = #unspill(coefficients_sampled, error);

        error, coefficients_sampled = rejection_sample_less_than_eta(state, error, coefficients_sampled);
    }

    return error;
}

namespace sample {
    inline
    fn error_vectors(stack u8[SEED_FOR_ERROR_VECTORS_SIZE] rho_prime)
        -> #secret stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL],
           #secret stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] {
        stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s1;
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2;

        inline int i;

        for i = 0 to COLUMNS_IN_MATRIX_A {
            s1[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] =
                sample_error_polynomial
                (
                    rho_prime,
                    i,
                    s1[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL]
                );
        }

        for i = 0 to ROWS_IN_MATRIX_A {
            s2[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] =
                sample_error_polynomial
                (
                    rho_prime,
                    COLUMNS_IN_MATRIX_A + i,
                    s2[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL]
                );
        }

        return s1, s2;
    }
}

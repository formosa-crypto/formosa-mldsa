require "../parameters.jinc"
require "../constants.jinc"

namespace t1 {
    fn encode_polynomial(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t1,
        reg ptr u8[T1_POLYNOMIAL_ENCODED_SIZE] t1_encoded
    ) -> reg ptr u8[T1_POLYNOMIAL_ENCODED_SIZE]
    {
        reg u64 i;
        reg u64 input_offset output_offset;
        reg u32 encoded_bytes encoded_byte;

        input_offset = 0;
        output_offset = 0;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL / 4) {
            // t1_encoded[5*i+0] = t1[4*i+0] >> 0;

            encoded_bytes = t1[input_offset];

            t1_encoded[output_offset] = (8u)encoded_bytes;
            output_offset += 1;

            // t1_encoded[5*i+1] = (t1[4*i+0] >> 8) | (t1[4*i+1] << 2);

            encoded_bytes = t1[input_offset];
            encoded_bytes >>= 8;

            input_offset += 1;
            encoded_byte = t1[input_offset];
            encoded_byte <<= 2;
            encoded_bytes |= encoded_byte;

            t1_encoded[output_offset] = (8u)encoded_bytes;
            output_offset += 1;

            // t1_encoded[5*i+2] = (t1[4*i+1] >> 6) | (t1[4*i+2] << 4);

            encoded_bytes = t1[input_offset];
            encoded_bytes >>= 6;

            input_offset += 1;
            encoded_byte = t1[input_offset];
            encoded_byte <<= 4;
            encoded_bytes |= encoded_byte;

            t1_encoded[output_offset] = (8u)encoded_bytes;
            output_offset += 1;

            // t1_encoded[5*i+3] = (t1[4*i+2] >> 4) | (t1[4*i+3] << 6);

            encoded_bytes = t1[input_offset];
            encoded_bytes >>= 4;

            input_offset += 1;
            encoded_byte = t1[input_offset];
            encoded_byte <<= 6;
            encoded_bytes |= encoded_byte;

            t1_encoded[output_offset] = (8u)encoded_bytes;
            output_offset += 1;

            // t1_encoded[5*i+4] = (t1[4*i+3] >> 2);

            encoded_bytes = t1[input_offset];
            encoded_bytes >>= 2;

            t1_encoded[output_offset] = (8u)encoded_bytes;
            output_offset += 1;

            input_offset += 1;
            i += 1;
        }

        return t1_encoded;
    }

    inline fn
    encode(
        reg ptr u8[T1_ENCODED_SIZE] encoded,
        reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t1
    ) -> reg ptr u8[T1_ENCODED_SIZE]
    {
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t1_to_pack;

        inline int j;

        for j = 0 to ROWS_IN_MATRIX_A {
            t1_to_pack = t1[COEFFICIENTS_IN_POLYNOMIAL * j : COEFFICIENTS_IN_POLYNOMIAL];
            encoded[j * T1_POLYNOMIAL_ENCODED_SIZE : T1_POLYNOMIAL_ENCODED_SIZE] = encode_polynomial(t1_to_pack, encoded[j * T1_POLYNOMIAL_ENCODED_SIZE : T1_POLYNOMIAL_ENCODED_SIZE]);
        }

        return encoded;
    }

    fn decode_polynomial(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t1,
        reg ptr u8[T1_POLYNOMIAL_ENCODED_SIZE] t1_encoded
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 i output_offset input_offset;
        reg u32 coefficient;
        reg u32 temp1 temp2;

        input_offset = 0;
        output_offset = 0;

        i = 0;
        while (i < COEFFICIENTS_IN_POLYNOMIAL / 4) {
            coefficient = (32u)t1_encoded[input_offset];
            input_offset += 1;

            temp1 = (32u)t1_encoded[input_offset];
            input_offset += 1;

            temp2 = temp1;
            temp1 <<= 8;
            coefficient |= temp1;
            coefficient &= BITS_IN_UPPER_PART_OF_T_MASK;

            t1[output_offset] = coefficient;
            output_offset += 1; 

            coefficient = temp2 >> 2;
            temp1 = (32u)t1_encoded[input_offset];
            input_offset += 1;

            temp2 = temp1;
            temp1 <<= 6;
            coefficient |= temp1;
            coefficient &= BITS_IN_UPPER_PART_OF_T_MASK;

            t1[output_offset] = coefficient;
            output_offset += 1; 

            coefficient = temp2 >> 4;
            temp1 = (32u)t1_encoded[input_offset];
            input_offset += 1;

            temp2 = temp1;
            temp1 <<= 4;
            coefficient |= temp1;
            coefficient &= BITS_IN_UPPER_PART_OF_T_MASK;

            t1[output_offset] = coefficient;
            output_offset += 1; 

            coefficient = temp2 >> 6;

            temp1 = (32u)t1_encoded[input_offset];
            input_offset += 1;

            temp1 <<= 2;
            coefficient |= temp1;

            t1[output_offset] = coefficient;
            output_offset += 1; 

            i += 1;
        }

        return t1;
    }

}

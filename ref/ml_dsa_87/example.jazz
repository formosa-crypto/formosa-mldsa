/* The correctness of the transformations applied by Jasmin when compiling code
 * relies on the input code not having undefined behaviour. Running our implementation
 * through the interpreter is a sanity-check: If we run the interpreter without
 * crashing the program, at least for the inputs we've given it here,
 * the program is correct.
 *
 * Ideally, we'd want to run the implementation through a safety-checker, but this
 * checker is outdated and takes an inordinate amount of time to run (on the order
 * of several days).
*/

require "ml_dsa.jazz"

fn test_consistency() -> reg bool {
    stack u8[VERIFICATION_KEY_SIZE] verification_key;
    stack u8[SIGNING_KEY_SIZE] signing_key;
    stack u8[SIGNATURE_SIZE] signature;
    stack u8[32] keygen_randomness;
    stack u8[32] signing_randomness;

    reg u64 message = 0x4000;
    reg u64 message_size = 64;

    reg u64 verify_result i;

    i = 0;
    while (i < 32) {
        keygen_randomness[i] = i;
        signing_randomness[i] = i;

        i += 1;
    }

    i = 0;
    while (i < 64) {
        (u8)[message + i] = i;
        i += 1;
    }

    #[inline]
    verification_key, signing_key = ml_dsa_87_keygen(verification_key, signing_key, keygen_randomness);
    #[inline]
    signature = ml_dsa_87_sign(signature, signing_key, message, message_size, signing_randomness);
    #[inline]
    verify_result = ml_dsa_87_verify(verification_key, message, message_size, signature);

    reg bool result;
    if (verify_result == 0) {
        result = true;
    } else {
        result = false;
    }

    return result;
}

exec test_consistency (
    0x4000:64 // Message
)

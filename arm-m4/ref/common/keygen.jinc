inline fn copy_polyvecl(reg ptr u32[polyvecl] s1hat, reg ptr u32[polyvecl] s1) -> reg ptr u32[polyvecl] {
    reg u32 i, t;

    i = 0;
    while (i < polyvecl) {
      t = s1[i];
      s1hat[i] = t;
      i += 1;
    }
    return s1hat;
}

/*************************************************
* Name:        JASMIN_MLDSA_crypto_sign_keypair_seed
*
* Description: Generates public and private key.
*
* Arguments:   - uint8_t *pk: pointer to output public key (allocated
*                             array of VERIFICATION_KEY_SIZE bytes)
*              - uint8_t *sk: pointer to output private key (allocated
*                             array of SIGNING_KEY_SIZE bytes)
*              - uint8_t *seed: pointer to input seed (allocated
*                             array of SEEDBYTES bytes)*
*
* Returns 0 (success)
**************************************************/
fn _crypto_sign_keypair_seed(
    #public reg ptr u8[VERIFICATION_KEY_SIZE] pk,
    reg ptr u8[SIGNING_KEY_SIZE] sk,
    #secret reg ptr u8[SEEDBYTES] seedbuf
) -> reg ptr u8[VERIFICATION_KEY_SIZE], reg ptr u8[SIGNING_KEY_SIZE] {
    stack u8[VERIFICATION_KEY_HASH_SIZE] tr;
    stack u32[matKL] mat;
    stack u32[polyvecl] s1, s1hat;
    stack u32[polyveck] s2, t1, t0;

    /****
    * Implements shake256(seedbuf, 2 * SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
    ****/
    stack u32[PQC_SHAKECTX_BYTES*2] state;
    reg ptr u32[PQC_SHAKECTX_BYTES*2] pstate;
    pstate = state;

    () = #spill(pk, sk);
    pstate = __SHAKE256_init_seed_ref(pstate, seedbuf);
    state = pstate;
    /***/

    reg ptr u8[SEEDBYTES] rho;
    #declassify rho = state[:u8 0:SEEDBYTES];

    /* Expand matrix */
    mat = _polyvec_matrix_expand(mat, rho);

    reg ptr u8[CRHBYTES] rhoprime;
    rhoprime = state[:u8 SEEDBYTES:CRHBYTES];

    reg u32 nonce;
    nonce = 0;
    /* Sample short vectors s1 and s2 */
    s1 = _polyvecl_uniform_eta(s1, rhoprime, nonce);
    nonce = L;
    rhoprime = state[:u8 SEEDBYTES:CRHBYTES];
    s2 = _polyveck_uniform_eta(s2, rhoprime, nonce);

    /* Matrix-vector multiplication */
    s1hat = copy_polyvecl(s1hat, s1);

    s1hat = _polyvecl_ntt(s1hat);
    t1 = _polyvec_matrix_pointwise_montgomery(t1, mat, s1hat);
    t1 = _polyveck_reduce(t1);
    t1 = _polyveck_invntt_tomont(t1);

    /* Add error vector s2 */
    t1 = _polyveck_add_inplace(t1, s2);

    /* Extract t1 and write public key */
    t1 = _polyveck_caddq(t1);
    t1, t0 = _polyveck_power2round_inplace(t1, t0);

    () = #unspill(pk);
    rho = state[:u8 0:SEEDBYTES];
    pk = _pack_pk(pk, rho, t1);

    /* Compute H(rho, t1) and write secret key */
    () = #spill(pk);
    tr = _hash_verification_key(tr, pk);

    reg ptr u8[SEEDBYTES] key;
    rho = state[:u8 0:SEEDBYTES];
    key = state[:u8 SEEDBYTES + CRHBYTES : SEEDBYTES];

    () = #unspill(sk);
    sk = _pack_sk(sk, rho, tr, key, t0, s1, s2);
    () = #unspill(pk);

    return pk, sk;
}

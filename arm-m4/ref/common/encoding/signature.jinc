fn _pack_sig_nocopy(
        reg ptr u8[SIGNATURE_SIZE] sig,
        reg ptr u32[polyvecl] z,
        reg ptr u32[polyveck] h
        ) -> reg ptr u8[SIGNATURE_SIZE] {
    inline int i;

    inline int current_position;
    current_position = 0;

    current_position += COMMITMENT_HASH_SIZE;

    reg ptr u32[N] nz;
    reg ptr u8[POLYZ_PACKEDBYTES] nsig;
    for i = 0 to L {
        nz = z[i * N: N];
        nsig = sig[current_position : POLYZ_PACKEDBYTES];
        sig[current_position : POLYZ_PACKEDBYTES] = _polyz_pack(nsig, nz);
        current_position += POLYZ_PACKEDBYTES;
    }

    reg u32 zero = 0;
    reg ptr u8[HINT_ENCODED_SIZE] pointer_to_hint = sig[current_position : HINT_ENCODED_SIZE];
    reg u32 j = 0;
    while (j < HINT_ENCODED_SIZE - 4) {
        pointer_to_hint.[:u32 j] = zero;
        j += 4;
    }
    while (j < HINT_ENCODED_SIZE) {
        pointer_to_hint[j] = zero;
        j += 1;
    }

    reg u32 hj;
    reg u32 k;
    k = 0;

    reg ptr u32[N] nh;
    for i = 0 to K {
        nh = h[i * N: N];
        j = 0;
        while (j < N) {
            hj = nh[j];
            if hj != 0 {
                pointer_to_hint[k] = j;
                k += 1;
            }
            j += 1;
        }
        pointer_to_hint[i + MAX_ONES_IN_HINT] = k;
    }
    sig[current_position : HINT_ENCODED_SIZE] = pointer_to_hint;

    return sig;
}


inline
fn __decode_hint(
        reg ptr u32[polyveck] hint_decoded,
        reg ptr u8[HINT_ENCODED_SIZE] hint_encoded
        ) -> reg ptr u32[polyveck], reg u32
{
    reg u32 j;
    reg u32 done;
    reg bool out_of_bounds;
    reg u32 index;
    reg u32 hint hint_at_j hint_at_j_minus_one;
    reg u32 previous_true_hints_seen current_true_hints_seen;
    reg u32 decoded_offset encoded_offset ill_formed_hint;

    reg u32 one = 1;
    reg u32 zero = 0;

    ill_formed_hint = 0;
    previous_true_hints_seen = 0;

    encoded_offset = 0;
    done = 0;
    while {
        out_of_bounds = encoded_offset >= K;
        done = ill_formed_hint;
        done = 1 if (out_of_bounds);
    } (done == 0) {
        decoded_offset = encoded_offset;
        decoded_offset <<= LOG_2_N;
        j = 0;

        while (j < N) {
            index = decoded_offset;
            index += j;
            hint_decoded[index] = zero;
            j += 1;
        }

        index = MAX_ONES_IN_HINT;
        index += encoded_offset;
        current_true_hints_seen = (32u)hint_encoded[index];

        if (current_true_hints_seen < previous_true_hints_seen) {
            ill_formed_hint = 1;
        } else {
            if (previous_true_hints_seen > MAX_ONES_IN_HINT) {
                ill_formed_hint = 1;
            } else {
                j = previous_true_hints_seen;

                while {
                    out_of_bounds = j >= current_true_hints_seen;
                    done = ill_formed_hint;
                    done = 1 if (out_of_bounds);
                } (done == 0) {
                    // Coefficients are ordered for strong unforgeability
                    hint_at_j = (32u)hint_encoded[j];

                    if (j > previous_true_hints_seen) {
                        index = j;
                        index -= 1;
                        hint_at_j_minus_one = (32u)hint_encoded[index];

                        if (hint_at_j <= hint_at_j_minus_one) {
                            ill_formed_hint = 1;
                        }
                    }

                    if (ill_formed_hint == 0) {
                        // h->vec[i].coeffs[sig[j]] = 1;
                        index = decoded_offset;
                        index += hint_at_j;
                        hint_decoded[index] = one;

                        j += 1;

                    }
                }
            }
        }

        if (ill_formed_hint == 0) {
            previous_true_hints_seen = current_true_hints_seen;
            encoded_offset += 1;
        }
    }

    encoded_offset = previous_true_hints_seen;
    while {
        out_of_bounds = encoded_offset >= MAX_ONES_IN_HINT;
        done = ill_formed_hint;
        done = 1 if (out_of_bounds);
    } (done == 0) {
        hint = (32u)hint_encoded[encoded_offset];

        if(hint != 0) {
            ill_formed_hint = 1;
        }
        encoded_offset += 1;
    }

    return hint_decoded, ill_formed_hint;
}

/*************************************************
 * Name:        JASMIN_MLDSA_unpack_sig
 *
 * Description: Unpack signature sig = (c, z, h).
 *
 * Arguments:   - uint8_t *c: pointer to output JASMIN_MLDSA_challenge hash
 *              - polyvecl *z: pointer to output vector z
 *              - polyveck *h: pointer to output hint vector h
 *              - const uint8_t sig[]: byte array containing
 *                bit-packed signature
 *
 * Returns 1 in case of malformed signature; otherwise 0.
 **************************************************/
fn _unpack_sig(reg ptr u8[COMMITMENT_HASH_SIZE] c,
        reg ptr u32[polyvecl] signer_response,
        reg ptr u32[polyveck] hints_decoded,
        reg ptr u8[SIGNATURE_SIZE] sig) ->
reg ptr u8[COMMITMENT_HASH_SIZE],
    reg ptr u32[polyvecl],
    reg ptr u32[polyveck],
    reg u32
{
    reg u32 ill_formed_hint;
    inline int i;
    inline int current_position;

    c = #copy(sig[0 : COMMITMENT_HASH_SIZE]);
    current_position = COMMITMENT_HASH_SIZE;

    () = #spill(c, hints_decoded);

    for i = 0 to L {
        signer_response[i * N: N] = _polyz_unpack(signer_response[i * N : N], sig[current_position : POLYZ_PACKEDBYTES]);
        current_position += POLYZ_PACKEDBYTES;
    }

    () = #unspill(c, hints_decoded);

    hints_decoded, ill_formed_hint = __decode_hint(hints_decoded, sig[current_position : HINT_ENCODED_SIZE]);

    return c, signer_response, hints_decoded, ill_formed_hint;
}

fn _montgomery_reduce_8380417(reg u32 a_low a_high) -> reg u32
{
  reg u32 res;
  res = __montgomery_reduce_8380417(a_low, a_high);
  return res;
}

/*************************************************
* Name:        JASMIN_MLDSA44_reduce32
*
* Description: For finite field element a with a <= 2^{31} - 2^{22} - 1,
*              compute r \equiv a (mod Q) such that -6283009 <= r <= 6283007.
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
inline fn __reduce32_8380417(reg u32 a) -> reg u32
{
  reg u32 t t_x511 t_x523265 t_x4286586879 res;

  t = __add_large_imm(a, (1 << 22));
  t = t >>s 23; // we have that: t = (a + (1 << 22)) >> 23;
  t_x511 = __rsb_lsl(t, t, 9);
  t_x523265 = __plus_lsl(t, t_x511, 10);
  t_x4286586879 = __rsb_lsl(t, t_x523265, 13);
  // we have that: t_x4286586879 == t * -Q 

  res = a + t_x4286586879;

  res = res;
  return res;
}

fn _reduce32_8380417(reg u32 a) -> reg u32
{
  reg u32 res;
  res = __reduce32_8380417(a);
  return res;
}

/*************************************************
* Name:        JASMIN_MLDSA44_caddq
*
* Description: Add Q if input coefficient is negative.
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/

/* FIXME this is stupid we recompute Q each time */
inline fn __caddq(reg u32 a) -> reg u32
{
  reg u32 q res;

  q = __Q();
  // TODO Optimize for ARM
  res = (a >>s 31);
  res = q & res;
  res += a;

  return res;
}

fn _caddq(reg u32 a) -> reg u32
{
  a = __caddq(a);
  return a;
}


/*************************************************
* Name:        JASMIN_MLDSA44_freeze
*
* Description: For finite field element a, compute standard
*              representative r = a mod^+ Q.
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
inline fn __freeze(reg u32 a) -> reg u32
{
  a = __reduce32_8380417(a);
  a = __caddq(a);
  return a;
}

fn _freeze(reg u32 a) -> reg u32
{
  a = __freeze(a);
  return a;
}

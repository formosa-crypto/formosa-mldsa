/*************************************************
 * Name:        JASMIN_MLDSA_pack_sk
 *
 * Description: Bit-pack secret key sk = (rho, verification_key_hash, key, t0, s1, s2).
 *
 * Arguments:   - uint8_t sk[]: output byte array
 *              - const uint8_t rho[]: byte array containing rho
 *              - const uint8_t verification_key_hash[]: byte array containing verification_key_hash
 *              - const uint8_t key[]: byte array containing key
 *              - const polyveck *t0: pointer to vector t0
 *              - const polyvecl *s1: pointer to vector s1
 *              - const polyveck *s2: pointer to vector s2
 **************************************************/
inline fn __pack_signing_key(
    reg ptr u8[SIGNING_KEY_SIZE] signing_key,
    reg ptr u8[SEEDBYTES] rho,
    reg ptr u8[VERIFICATION_KEY_HASH_SIZE] verification_key_hash,
    reg ptr u8[SEEDBYTES] key,
    reg ptr u32[polyveck] t0,
    reg ptr u32[polyvecl] s1,
    reg ptr u32[polyveck] s2
) -> reg ptr u8[SIGNING_KEY_SIZE] {
    inline int i;
    inline int current_position;
    current_position = 0;

    reg ptr u8[SEEDBYTES] tsk;
    reg ptr u8[VERIFICATION_KEY_HASH_SIZE] verification_key_hash_ptr;

    tsk = signing_key[current_position : SEEDBYTES];
    tsk = #copy(rho);
    signing_key[current_position:SEEDBYTES] = tsk;
    current_position += SEEDBYTES;

    tsk = signing_key[current_position : SEEDBYTES];
    tsk = #copy(key);
    signing_key[current_position : SEEDBYTES] = tsk;
    current_position += SEEDBYTES;

    verification_key_hash_ptr = signing_key[current_position : VERIFICATION_KEY_HASH_SIZE];
    verification_key_hash_ptr = #copy(verification_key_hash);
    signing_key[current_position : VERIFICATION_KEY_HASH_SIZE] = verification_key_hash_ptr;
    current_position += VERIFICATION_KEY_HASH_SIZE;

    () = #spill(t0, s2);
    reg ptr u32[N] ns1;
    for i = 0 to L {
        ns1 = s1[i * N: N];
        () = #spill(s1);
        signing_key[current_position : POLYETA_PACKEDBYTES] = _polyeta_pack(
            signing_key[current_position : POLYETA_PACKEDBYTES],
            ns1
        );
        () = #unspill(s1);
        current_position += POLYETA_PACKEDBYTES;
    }

    () = #unspill(s2);
    reg ptr u32[N] ns2;
    for i = 0 to K {
        ns2 = s2[i * N: N];
        () = #spill(s2);
        signing_key[current_position : POLYETA_PACKEDBYTES] = _polyeta_pack(
            signing_key[current_position : POLYETA_PACKEDBYTES],
            ns2
        );
        () = #unspill(s2);
        current_position += POLYETA_PACKEDBYTES;
    }
    () = #unspill(t0);

    reg ptr u32[N] nt0;
    for i = 0 to K {
        nt0 = t0[i * N: N];
        () = #spill(t0);
        signing_key[current_position : POLYT0_PACKEDBYTES] = _polyt0_pack(
            signing_key[current_position : POLYT0_PACKEDBYTES],
            nt0
        );
        () = #unspill(t0);
        current_position += POLYT0_PACKEDBYTES;
    }

    return signing_key;
}

#[ct = "_ * _ * _ * _ * _ * _ * secret -> _ * _ * _ * _ * _ * _"]
fn _unpack_sk(
    reg ptr u8[SEEDBYTES] rho,
    reg ptr u8[VERIFICATION_KEY_HASH_SIZE] tr,
    reg ptr u8[SEEDBYTES] key,
    reg ptr u32[polyveck] t0,
    reg ptr u32[polyvecl] s1,
    reg ptr u32[polyveck] s2,
    reg ptr u8[SIGNING_KEY_SIZE] sk
) -> reg ptr u8[SEEDBYTES], // rho
     reg ptr u8[VERIFICATION_KEY_HASH_SIZE], // tr
     reg ptr u8[SEEDBYTES], // key
     reg ptr u32[polyveck], // t0
     reg ptr u32[polyvecl], // s1
     reg ptr u32[polyveck] // s2
{
    sk = sk; t0 = t0; s1 = s1; s2 = s2;

    inline int i;
    inline int current_position;
    current_position = 0;

    reg ptr u8[SEEDBYTES] tsk;
    reg ptr u8[VERIFICATION_KEY_HASH_SIZE] ttr;

    tsk = sk[current_position : SEEDBYTES];
    rho = #copy(tsk);
    current_position += SEEDBYTES;

    tsk = sk[current_position :  SEEDBYTES];
    key = #copy(tsk);
    current_position += SEEDBYTES;

    ttr = sk[current_position : VERIFICATION_KEY_HASH_SIZE];
    tr = #copy(ttr);
    current_position += VERIFICATION_KEY_HASH_SIZE;

    reg ptr u8[POLYETA_PACKEDBYTES] nsk;

    () = #spill(t0);
    () = #spill(s2);
    () = #spill(rho);
    () = #spill(tr);
    () = #spill(key);
    reg ptr u32[N] ns1;
    for i = 0 to L {
        ns1 = s1[i * N: N];
        nsk = sk[current_position : POLYETA_PACKEDBYTES];
        s1[i * N: N] = _polyeta_unpack(ns1, nsk);
        current_position += POLYETA_PACKEDBYTES;
    }

    () = #unspill(s2);
    reg ptr u32[N] ns2;
    for i = 0 to K {
        ns2 = s2[i * N: N];
        nsk = sk[current_position : POLYETA_PACKEDBYTES];
        () = #spill(sk);
        s2[i * N: N] = _polyeta_unpack(ns2, nsk);
        () = #unspill(sk);
        current_position += POLYETA_PACKEDBYTES;
    }
    () = #unspill(t0);
    () = #spill(s1, s2);

    reg ptr u32[N] nt0;
    reg ptr u8[POLYT0_PACKEDBYTES] nnsk;
    for i = 0 to K {
        nt0 = t0[i * N: N];
        nnsk = sk[current_position : POLYT0_PACKEDBYTES];
        t0[i * N: N] = _polyt0_unpack(nt0, nnsk);
        current_position += POLYT0_PACKEDBYTES;
    }
    () = #unspill(rho);
    () = #unspill(tr);
    () = #unspill(key);
    () = #unspill(s1,s2);
    return rho, tr, key, t0, s1, s2;
}

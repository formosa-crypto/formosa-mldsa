inline fn __power2round_a0a1(reg u32 a) -> reg u32, reg u32 
{
    reg u32 a0 a1;
    a1 = __add_large_imm(a, (1 << (D - 1)) - 1);
    a1 = a1 >>s D;
    a0 = __sub_lsl(a, a1, D);
    return (a0, a1);
}

inline fn __decompose_a0a1(reg u32 a q) -> reg u32, reg u32
{
    reg u32 a0 a1 aux;

    /* a1  = (a + 127) >> 7; */
    a1 =  a + 127;
    a1 >>s= 7;

    /* a1  = (a1 * 1025 + (1 << 21)) >> 22;
       a1 &= 15; */

    aux = __plus_lsl(a1, a1, 10); // aux = a1 * 1025;
    aux = __add_large_imm(aux, 1 << 21);
    a1 = __ubfx(aux, 22, 4);

    /* *a0  = a - a1 * 2 * GAMMA2; */
    /* - 2*GAMMA2 = (1 - 2 ^ 10) * 2^9 */
    aux = __sub_lsl(a1, a1, 10);
    a0 = __plus_lsl(a, aux, 9);

    /* *a0 -= (((Q - 1) / 2 - *a0) >> 31) & Q; */
    /* (Q - 1) / 2 = 1023 * 2^12 */
    aux = 1023;
    // (Q - 1) / 2 - *a0
    aux = __rsb_lsl(a0, aux, 12);
    aux = __and_asr(q, aux, 31);
    a0 -= aux;

    return a0, a1;
}

inline fn __make_hint(reg u32 a0, reg u32 a1, reg u32 gamma2) -> reg u32
{
    reg u32 mgamma2 res;
    inline bool lt eq;

    res = 1;

    #declassify a0 = a0;
    if (a0 <=s gamma2) {
        mgamma2 = -gamma2;

        eq, lt = __cmp_eq_lt(a0, mgamma2);

        if (!lt) {

            if (!eq) {
                res = 0;
            }

            #declassify a1 = a1;
            if (a1 == 0) {
                res = 0;
            }

        }
    }
    return res;
}

inline fn __use_hint(reg u32 a, reg u32 hint, reg u32 q) -> reg u32 {
    reg u32 a0 a1;
    inline bool gt le;

    a0, a1 = __decompose_a0a1(a, q);

    if (hint != 0) {
        gt, le = __cmp_gt_le_zero(a0);


        if (gt) {
            a1 += 1;
        }
        if (le) {
            a1 -=1 ;
        }

        a1 &= 15;
    }
    return a1;
}

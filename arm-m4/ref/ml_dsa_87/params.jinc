param int K = 8;
param int L = 7;
param int ETA = 2;
param int TAU = 60;
param int BETA = 120;
param int MAX_ONES_IN_HINT = 75;
param int COMMITMENT_HASH_SIZE = 64;

param int POLYZ_PACKEDBYTES = 640; // N/2 * 5
param int POLYW1_PACKEDBYTES = 128; // N/2
param int POLYETA_PACKEDBYTES = 96; // N/8 * 3

param int POLYT1_PACKEDBYTES  = 320; // N/4 * 5
param int POLYT0_PACKEDBYTES = 416; // N/8 * 13

param int iGAMMA1 = (1 << 19);
param int iGAMMA2 = ((iQ-1)/32);

param int HINT_ENCODED_SIZE = (MAX_ONES_IN_HINT + K);

param int VERIFICATION_KEY_SIZE = (SEEDBYTES + K*POLYT1_PACKEDBYTES);

param int SIGNING_KEY_SIZE = (2*SEEDBYTES + VERIFICATION_KEY_HASH_SIZE + L*POLYETA_PACKEDBYTES + K*POLYETA_PACKEDBYTES + K*POLYT0_PACKEDBYTES);
param int SIGNATURE_SIZE = (COMMITMENT_HASH_SIZE + L*POLYZ_PACKEDBYTES + HINT_ENCODED_SIZE);

param int polyvecl = N * L;
param int polyveck = N * K;

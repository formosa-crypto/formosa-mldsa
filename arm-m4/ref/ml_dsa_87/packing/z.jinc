fn _polyz_pack(reg ptr u8[POLYZ_PACKEDBYTES] r, reg ptr u32[N] a) -> reg ptr u8[POLYZ_PACKEDBYTES] {
    reg u32 i, j, aux, gamma1;
    reg u32[2] t;
    inline int k;

    gamma1 = iGAMMA1;

    i = 0; j = 0;
    while (i < N) {
        for k = 0 to 2 {
            t[k] = a[i]; t[k] = gamma1 - t[k];
            i += 1;
        }

        /* r[5 * i + 0]  = (uint8_t) t[0]; */
        r[j] = t[0]; j += 1;

        /* r[5 * i + 1]  = (uint8_t) (t[0] >> 8); */
        aux = t[0] >> 8;
        r[j] = aux; j += 1;

        /* r[5 * i + 2]  = (uint8_t) (t[0] >> 16); */
        /* r[5 * i + 2] |= (uint8_t) (t[1] << 4); */

        aux = t[0] >> 16;
        aux = __or_lsl_inplace(aux, t[1], 4);
        r[j] = aux; j += 1;

        /* r[5 * i + 3]  = (uint8_t) (t[1] >> 4); */
        aux = t[1] >> 4;
        r[j] = aux; j += 1;

        /* r[5 * i + 4]  = (uint8_t) (t[1] >> 12); */
        aux = t[1] >> 12;
        r[j] = aux; j += 1;

    }
    return r;
}

fn _polyz_unpack(reg ptr u32[N] r, reg ptr u8[POLYZ_PACKEDBYTES] a) -> reg ptr u32[N] {
    reg u32 i, j, gamma1, aux;
    reg u32[5] t;
    inline int k;

    gamma1 = iGAMMA1;
    i = 0; j = 0;
    while(i < N) {
        for k = 0 to 5 { t[k] = (32u) a[j]; j += 1; }

        /* r->coeffs[2 * i + 0]  = a[5 * i + 0];  
           r->coeffs[2 * i + 0] |= (uint32_t)a[5 * i + 1] << 8; 
           r->coeffs[2 * i + 0] |= (uint32_t)a[5 * i + 2] << 16; 
           r->coeffs[2 * i + 0] &= 0xFFFFF; */
        aux = __or_lsl(t[0], t[1], 8);
        aux = __or_lsl_inplace(aux, t[2], 16);
        aux = __ubfx(aux, 0, 20);
        aux = gamma1 - aux;
        r[i] = aux; i += 1;

        /* r->coeffs[2 * i + 1]  = a[5 * i + 2] >> 4; */
        /* r->coeffs[2 * i + 1] |= (uint32_t)a[5 * i + 3] << 4; */
        /* r->coeffs[2 * i + 1] |= (uint32_t)a[5 * i + 4] << 12; */
        /* r->coeffs[2 * i + 0] &= 0xFFFFF; */  // this look like a lucky bug
        aux = t[2] >> 4;
        aux = __or_lsl_inplace(aux, t[3], 4);
        aux = __or_lsl_inplace(aux, t[4], 12);
        aux = gamma1 - aux;
        r[i] = aux; i += 1;

        // Moved up
        /* r->coeffs[2 * i + 0] = GAMMA1 - r->coeffs[2 * i + 0]; */
        /* r->coeffs[2 * i + 1] = GAMMA1 - r->coeffs[2 * i + 1]; */
    }
    return r;
}

fn _polyz_pack(reg ptr u8[POLYZ_PACKEDBYTES] r, reg ptr u32[N] a) -> reg ptr u8[POLYZ_PACKEDBYTES] {
    reg u32 i, j, aux, gamma1;
    reg u32[2] t;
    inline int k;

    gamma1 = iGAMMA1;

    i = 0; j = 0;
    while (i < N) {
        for k = 0 to 2 {
            t[k] = a[i]; t[k] = gamma1 - t[k];
            i += 1;
        }

        /* r[5 * i + 0]  = (uint8_t) t[0]; */
        r[j] = t[0]; j += 1;

        /* r[5 * i + 1]  = (uint8_t) (t[0] >> 8); */
        aux = t[0] >> 8;
        r[j] = aux; j += 1;

        /* r[5 * i + 2]  = (uint8_t) (t[0] >> 16); */
        /* r[5 * i + 2] |= (uint8_t) (t[1] << 4); */

        aux = t[0] >> 16;
        aux = __or_lsl_inplace(aux, t[1], 4);
        r[j] = aux; j += 1;

        /* r[5 * i + 3]  = (uint8_t) (t[1] >> 4); */
        aux = t[1] >> 4;
        r[j] = aux; j += 1;

        /* r[5 * i + 4]  = (uint8_t) (t[1] >> 12); */
        aux = t[1] >> 12;
        r[j] = aux; j += 1;

    }
    return r;
}

fn _polyz_unpack(
    reg ptr u32[N] poly_z,
    reg ptr u8[POLYZ_PACKEDBYTES] bytes
) -> reg ptr u32[N]
{
    reg u32 i = 0;
    reg u32 j = 0;

    while(i < POLYZ_PACKEDBYTES) {
        poly_z[j : 2] = _polyz_unpack_5_bytes(poly_z[j : 2], bytes[i : 5]);
        j += 2;
        i += 5;
    }

    return poly_z;
}

fn _poly_compress_challenge(
    reg ptr u8[COMPRESSED_CHALLENGE_SIZE] compressed_challenge,
    reg ptr u32[N] challenge
) -> reg ptr u8[COMPRESSED_CHALLENGE_SIZE]
{
    reg u32 zero = 0;
    reg u32 output_offset = 0;
    reg u32 ones_seen = 0;

    reg u32 mask = 1;
    reg u32 signs = 0;

    reg u32 coeff;

    reg u32 i = 0;

    while (ones_seen < 32) {
        #declassify coeff = challenge[i];

        if (coeff != 0) {
            compressed_challenge[output_offset] = i;
            output_offset += 1;

            if (coeff == -1) {
                signs |= mask;
            }

            mask <<= 1;
            ones_seen += 1;
        }

        i += 1;
    }
    compressed_challenge.[:u32 COMPRESSED_CHALLENGE_SIZE - 8] = signs;

    mask = 1;
    signs = 0;
    while (i < N) {
        #declassify coeff = challenge[i];

        if (coeff != 0) {
            compressed_challenge[output_offset] = i;
            output_offset += 1;

            if (coeff == -1) {
                signs |= mask;
            }

            mask <<= 1;
        }

        i += 1;
    }
    compressed_challenge.[:u32 COMPRESSED_CHALLENGE_SIZE - 4] = signs;

    return compressed_challenge;
}

fn _poly_decompress_challenge(
    reg ptr u32[N] challenge,
    reg ptr u8[COMPRESSED_CHALLENGE_SIZE] compressed_challenge
) -> reg ptr u32[N]
{
    reg u32 signs;
    reg u32 sign next_nonzero_index;

    reg u32 zero = 0;
    reg u32 i = 0;

    while (i < N) {
        challenge[i] = zero;
        i += 1;
    }

    signs = compressed_challenge.[:u32 COMPRESSED_CHALLENGE_SIZE - 8];
    i = 0;
    while (i < 32) {
        next_nonzero_index = (32u)compressed_challenge[i];
        i += 1;

        sign = signs & 1;
        signs >>= 1;

        if (sign == 1) {
            sign = -1;
        } else {
            sign = 1;
        }

        challenge[next_nonzero_index] = sign;
    }

    signs = compressed_challenge.[:u32 COMPRESSED_CHALLENGE_SIZE - 4];
    while (i < TAU) {
        next_nonzero_index = (32u)compressed_challenge[i];
        i += 1;

        sign = signs & 1;
        signs >>= 1;

        if (sign == 1) {
            sign = -1;
        } else {
            sign = 1;
        }

        challenge[next_nonzero_index] = sign;
    }

    return challenge;
}

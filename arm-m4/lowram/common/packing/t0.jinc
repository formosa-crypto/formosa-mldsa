/*************************************************
* Name:        JASMIN_MLDSA_polyt0_pack
*
* Description: Bit-pack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
fn _polyt0_pack(reg ptr u8[POLYT0_PACKEDBYTES] r, reg ptr u32[N] a) -> reg ptr u8[POLYT0_PACKEDBYTES] {
  reg u32 i, j, aux;
  reg u32[7] t;
  reg u32 t7;
  inline int k;

  i = 0; j = 0;
  while(i < N)
  {
    for k = 0 to 7 {
      t[k] = a[i]; i += 1;
      t[k] = __imm_sub_reg((1 << (D - 1)), t[k]);
    }
    /* r[13 * i + 0]  =  (uint8_t) t[0];           */
    r[j] = t[0]; j += 1;   // j = 1

    /* r[13 * i + 1]  =  (uint8_t) (t[0] >>  8);   */
    /* r[13 * i + 1] |=  (uint8_t) (t[1] <<  5);   */
    aux = t[0] >> 8;
    aux = __or_lsl_inplace(aux, t[1], 5);
    r[j] = aux; j += 1;  // j = 2

    /* r[13 * i + 2]  =  (uint8_t) (t[1] >>  3);   */
    aux = t[1] >> 3;
    r[j] = aux; j += 1;   // j = 3

    /* r[13 * i + 3]  =  (uint8_t) (t[1] >> 11);   */
    /* r[13 * i + 3] |=  (uint8_t) (t[2] <<  2);   */
    aux = t[1] >> 11;
    aux = __or_lsl_inplace(aux, t[2], 2);
    r[j] = aux; j += 1;  // j = 4

    /* r[13 * i + 4]  =  (uint8_t) (t[2] >>  6);   */
    /* r[13 * i + 4] |=  (uint8_t) (t[3] <<  7);   */
    aux = t[2] >> 6;
    aux = __or_lsl_inplace(aux, t[3], 7);
    r[j] = aux; j += 1; // j = 5

    /* r[13 * i + 5]  =  (uint8_t) (t[3] >>  1);   */
    aux = t[3] >> 1;
    r[j] = aux; j += 1; // j = 6

    /* r[13 * i + 6]  =  (uint8_t) (t[3] >>  9);   */
    /* r[13 * i + 6] |=  (uint8_t) (t[4] <<  4);   */
    aux = t[3] >> 9;
    aux = __or_lsl_inplace(aux, t[4], 4);
    r[j] = aux; j += 1; // j = 7

    /* r[13 * i + 7]  =  (uint8_t) (t[4] >>  4);   */
    aux = t[4] >> 4;
    r[j] = aux; j += 1;  // j = 8

    /* r[13 * i + 8]  =  (uint8_t) (t[4] >> 12);   */
    /* r[13 * i + 8] |=  (uint8_t) (t[5] <<  1);   */
    aux = t[4] >> 12;
    aux = __or_lsl_inplace(aux, t[5], 1);
    r[j] = aux; j += 1;  // j = 9

    /* r[13 * i + 9]  =  (uint8_t) (t[5] >>  7);   */
    /* r[13 * i + 9] |=  (uint8_t) (t[6] <<  6);   */
    aux = t[5] >> 7;
    aux = __or_lsl_inplace(aux, t[6], 6);
    r[j] = aux; j += 1;  // j = 10

    /* r[13 * i + 10]  =  (uint8_t) (t[6] >>  2);  */
    aux = t[6] >> 2;
    r[j] = aux; j += 1;  // j = 11

    /* r[13 * i + 11]  =  (uint8_t) (t[6] >> 10);  */
    /* r[13 * i + 11] |=  (uint8_t) (t[7] <<  3);  */
    t7 = a[i]; i += 1;
    t7 = __imm_sub_reg((1 << (D - 1)), t7);

    aux = t[6] >> 10;
    aux = __or_lsl_inplace(aux, t7, 3);
    r[j] = aux; j += 1; // j = 12

    /* r[13 * i + 12]  =  (uint8_t) (t[7] >>  5);  */
    aux = t7 >> 5;
    r[j] = aux; j += 1;  // j = 13
  }
  return r;
}

/*************************************************
* Name:        JASMIN_MLDSA_polyt0_unpack
*
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
fn _polyt0_unpack(reg ptr u32[N] r, reg ptr u8[POLYT0_PACKEDBYTES] a) -> reg ptr u32[N] {
  reg u32 i, j, a_;
  reg u32[8] t;

  i = 0; j = 0;
  while(i < N) {
    /*  r->coeffs[8 * i + 0]  = a[13 * i + 0];
        r->coeffs[8 * i + 0] |= (uint32_t)a[13 * i + 1] << 8;
        r->coeffs[8 * i + 0] &= 0x1FFF; */

    t[0] = (32u) a[j]; j += 1;  // j = 1
    a_ = (32u) a[j]; j += 1;    // j = 2  a_ = a[1]

    t[0] = __or_lsl_inplace(t[0], a_, 8);
    t[0] = __ubfx(t[0], 0, 13);
    t[0] = __imm_sub_reg((1 << (D - 1)), t[0]);
    r[i] = t[0]; i += 1;

    /*  r->coeffs[8 * i + 1]  = a[13 * i + 1] >> 5;
        r->coeffs[8 * i + 1] |= (uint32_t)a[13 * i + 2] << 3;
        r->coeffs[8 * i + 1] |= (uint32_t)a[13 * i + 3] << 11;
        r->coeffs[8 * i + 1] &= 0x1FFF; */
    t[1] = a_ >> 5;
    a_ = (32u) a[j]; j += 1; // j = 3
    t[1] = __or_lsl_inplace(t[1], a_, 3);
    a_ = (32u) a[j]; j += 1; // j = 4 a_ = a[3]
    t[1] = __or_lsl_inplace(t[1], a_, 11);
    t[1] = __ubfx(t[1], 0, 13);
    t[1] = __imm_sub_reg((1 << (D - 1)), t[1]);
    r[i] = t[1]; i += 1;

    /*  r->coeffs[8 * i + 2]  = a[13 * i + 3] >> 2;
        r->coeffs[8 * i + 2] |= (uint32_t)a[13 * i + 4] << 6;
        r->coeffs[8 * i + 2] &= 0x1FFF; */
    t[2] = a_ >> 2;
    a_ = (32u) a[j]; j += 1;  // j = 5  a_ = a[4]
    t[2] = __or_lsl_inplace(t[2], a_, 6);
    t[2] = __ubfx(t[2], 0, 13);

    t[2] = __imm_sub_reg((1 << (D - 1)), t[2]);
    r[i] = t[2]; i += 1;

    /*  r->coeffs[8 * i + 3]  = a[13 * i + 4] >> 7;
        r->coeffs[8 * i + 3] |= (uint32_t)a[13 * i + 5] << 1;
        r->coeffs[8 * i + 3] |= (uint32_t)a[13 * i + 6] << 9;
        r->coeffs[8 * i + 3] &= 0x1FFF; */
    t[3] = a_ >> 7;
    a_ = (32u) a[j]; j += 1;  // j = 6
    t[3] = __or_lsl_inplace(t[3], a_, 1);
    a_ = (32u) a[j]; j += 1; // j = 7 a_ = a[6]
    t[3] = __or_lsl_inplace(t[3], a_, 9);
    t[3] = __ubfx(t[3], 0, 13);
    t[3] = __imm_sub_reg((1 << (D - 1)), t[3]);
    r[i] = t[3]; i += 1;

    /*  r->coeffs[8 * i + 4]  = a[13 * i + 6] >> 4;
        r->coeffs[8 * i + 4] |= (uint32_t)a[13 * i + 7] << 4;
        r->coeffs[8 * i + 4] |= (uint32_t)a[13 * i + 8] << 12;
        r->coeffs[8 * i + 4] &= 0x1FFF; */
    t[4] = a_ >> 4;
    a_ = (32u) a[j]; j += 1;  // j = 8
    t[4] = __or_lsl_inplace(t[4], a_, 4);
    a_ = (32u) a[j]; j += 1; // j = 9   a_ = a[8]
    t[4] = __or_lsl_inplace(t[4], a_, 12);
    t[4] = __ubfx(t[4], 0, 13);
    t[4] = __imm_sub_reg((1 << (D - 1)), t[4]);
    r[i] = t[4]; i += 1;

    /*  r->coeffs[8 * i + 5]  = a[13 * i + 8] >> 1;
        r->coeffs[8 * i + 5] |= (uint32_t)a[13 * i + 9] << 7;
        r->coeffs[8 * i + 5] &= 0x1FFF; */
    t[5] = a_ >> 1;
    a_ = (32u) a[j]; j += 1; // j = 10   a_ = a[9]
    t[5] = __or_lsl_inplace(t[5], a_, 7);
    t[5] = __ubfx(t[5], 0, 13);
    t[5] = __imm_sub_reg((1 << (D - 1)), t[5]);
    r[i] = t[5]; i += 1;

    /*  r->coeffs[8 * i + 6]  = a[13 * i + 9] >> 6;
        r->coeffs[8 * i + 6] |= (uint32_t)a[13 * i + 10] << 2;
        r->coeffs[8 * i + 6] |= (uint32_t)a[13 * i + 11] << 10;
        r->coeffs[8 * i + 6] &= 0x1FFF; */
    t[6] = a_ >> 6;
    a_ = (32u) a[j]; j += 1; // j = 11   a_ = a[10]
    t[6] = __or_lsl_inplace(t[6], a_, 2);
    a_ = (32u) a[j]; j += 1; // j = 12   a_ = a[11]
    t[6] = __or_lsl_inplace(t[6], a_, 10);
    t[6] = __ubfx(t[6], 0, 13);
    t[6] = __imm_sub_reg((1 << (D - 1)), t[6]);
    r[i] = t[6]; i += 1;

    /*  r->coeffs[8 * i + 7]  = a[13 * i + 11] >> 3;
        r->coeffs[8 * i + 7] |= (uint32_t)a[13 * i + 12] << 5;
        r->coeffs[8 * i + 7] &= 0x1FFF; */
    t[7] = a_ >> 3;
    a_ = (32u) a[j]; j += 1; // j = 13   a_ = a[12]
    t[7] = __or_lsl_inplace(t[7], a_, 5);
    t[7] = __ubfx(t[7], 0, 13);
    t[7] = __imm_sub_reg((1 << (D - 1)), t[7]);
    r[i] = t[7]; i += 1;

    /* This is moved up */
    /*  r->coeffs[8 * i + 0] = (1 << (D - 1)) - r->coeffs[8 * i + 0];
        r->coeffs[8 * i + 1] = (1 << (D - 1)) - r->coeffs[8 * i + 1];
        r->coeffs[8 * i + 2] = (1 << (D - 1)) - r->coeffs[8 * i + 2];
        r->coeffs[8 * i + 3] = (1 << (D - 1)) - r->coeffs[8 * i + 3];
        r->coeffs[8 * i + 4] = (1 << (D - 1)) - r->coeffs[8 * i + 4];
        r->coeffs[8 * i + 5] = (1 << (D - 1)) - r->coeffs[8 * i + 5];
        r->coeffs[8 * i + 6] = (1 << (D - 1)) - r->coeffs[8 * i + 6];
        r->coeffs[8 * i + 7] = (1 << (D - 1)) - r->coeffs[8 * i + 7]; */
  }
  return r;
}

fn _t0_unpack_coefficient_at_index(
    reg ptr u8[POLYT0_PACKEDBYTES] packed,
    reg u32 index
) -> reg u32 {
    reg u32 coeff temp;
    reg u32 offset;
    reg u32 start_byte;

    // 8 coefficients are packed in 13 bytes
    start_byte = (index >> 3);
    temp = 13;
    start_byte *= temp;

    offset = index & 0x7;

    if (offset == 0)
    {
        coeff = (32u)packed[start_byte];

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 8;

        coeff |= temp;
    }
    else if (offset == 1)
    {
        start_byte += 1;
        coeff = (32u)packed[start_byte];
        coeff >>= 5;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 3;
        coeff |= temp;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 11;
        coeff |= temp;
    }
    else if (offset == 2)
    {
        start_byte += 3;
        coeff = (32u)packed[start_byte];
        coeff >>= 2;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 6;

        coeff |= temp;
    }
    else if (offset == 3)
    {
        start_byte += 4;
        coeff = (32u)packed[start_byte];
        coeff >>= 7;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 1;
        coeff |= temp;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 9;
        coeff |= temp;
    }
    else if (offset == 4)
    {
        start_byte += 6;
        coeff = (32u)packed[start_byte];
        coeff >>= 4;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 4;
        coeff |= temp;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 12;
        coeff |= temp;
    }
    else if (offset == 5)
    {
        start_byte += 8;
        coeff = (32u)packed[start_byte];
        coeff >>= 1;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 7;
        coeff |= temp;
    }
    else if (offset == 6)
    {
        start_byte += 9;
        coeff = (32u)packed[start_byte];
        coeff >>= 6;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 2;
        coeff |= temp;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 10;
        coeff |= temp;
    }
    else
    {
        start_byte += 11;
        coeff = (32u)packed[start_byte];
        coeff >>= 3;

        start_byte += 1;
        temp = (32u)packed[start_byte];
        temp <<= 5;
        coeff |= temp;
    }

    temp = 0x1FFF;
    coeff &= temp;

    temp = 1 << (D - 1);
    coeff = temp - coeff;

    return coeff;
}

inline fn __high(reg u32[2] x) -> reg u32
{
    reg u32 h;
    h = x[1];
    return h;
}

inline fn __low(reg u32[2] x) -> reg u32
{
    reg u32 l;
    l = x[0];
    return l;
}

inline fn __make_64(reg u32 h, reg u32 l) -> reg u32[2]
{
    reg u32[2] y;

    y[0] = l;
    y[1] = h;

    return y;
}

inline fn shift_left(reg u32[2] x, inline int i) -> reg u32[2]
{
    reg u32 h l;
    h = __high(x);
    l = __low(x);

    h <<= i;
    h |= (l >> (32 - i));
    l <<= i;

    reg u32[2] y;
    y = __make_64(h, l);

    return y;
}

inline fn __shift_right(reg u32[2] x, inline int i) -> reg u32[2]
{
    reg u32 h l;
    h = __high(x);
    l = __low(x);

    l >>= i;
    l = __or_lsl_inplace(l, h, (32 - i));
    h >>= i;

    reg u32[2] y;
    y = __make_64(h, l);

    return y;
}

inline fn __rej_sample(
        reg ptr u32[N] a,
        reg u32 ctr,
        reg u32 t,
        reg u32 q
) -> reg ptr u32[N], reg u32
{
    inline bool b;
    b = __cmp_b(t, q);

    if (b) {
        a[ctr] = t;
        ctr = ctr + 1;
    }

    return a, ctr;
}

/*************************************************
 * Name:        JASMIN_MLDSA_poly_reduce
 *
 * Description: Inplace reduction of all coefficients of polynomial to
 *              representative in [-6283009,6283007].
 *
 * Arguments:   - poly *a: pointer to input/output polynomial
 **************************************************/
fn _poly_reduce(reg ptr u32[N] a) -> reg ptr u32[N]
{
    a = __map1__reduce32_8380417(a);
    return a;
}

/*************************************************
 * Name:        JASMIN_MLDSA_poly_caddq
 *
 * Description: For all coefficients of in/out polynomial add Q if
 *              coefficient is negative.
 *
 * Arguments:   - poly *a: pointer to input/output polynomial
 **************************************************/
fn _poly_caddq(reg ptr u32[N] a) -> reg ptr u32[N]
{
    a = __map1__caddq(a);
    return a;
}

/*************************************************
 * Name:        JASMIN_MLDSA_poly_add
 *
 * Description: Add polynomials. No modular reduction is performed.
 *
 * Arguments:   - poly *c: pointer to output polynomial
 *              - const poly *a: pointer to first summand
 *              - const poly *b: pointer to second summand
 **************************************************/
inline fn __poly_add_body(reg u32 coeff_a, reg u32 coeff_b) -> reg u32
{
    coeff_a = coeff_a + coeff_b;
    return coeff_a;
}

fn _poly_add_inplace(reg ptr u32[N] a b) -> reg ptr u32[N]
{
    reg u32 i coeff_a coeff_b;

    i = 0;
    while(i < N)
    {
        coeff_a = a[i];
        coeff_b = b[i];
        coeff_a = __poly_add_body(coeff_a, coeff_b);
        a[i] = coeff_a;

        i += 1;
    }

    return a;
}

// TODO: Fix this name
fn _poly_add2_inplace(reg ptr u32[N] a) -> reg ptr u32[N]
{
    reg u32 i coeff_a;

    i = 0;
    while(i < N)
    {
        coeff_a = a[i];
        coeff_a = __poly_add_body(coeff_a, coeff_a);
        a[i] = coeff_a;

        i += 1;
    }

    return a;
}


/**************************************************
 * Name:        JASMIN_MLDSA_poly_chknorm
 *
 * Description: Check infinity norm of polynomial against given bound.
 *              Assumes input coefficients were reduced by JASMIN_MLDSA_reduce32().
 *
 * Arguments:   - const poly *a: pointer to polynomial
 *              - int32_t B: norm bound
 *
 * Returns 0 if norm is strictly smaller than B <= (Q-1)/8 and 1 otherwise.
 **************************************************/
fn _poly_chknorm(reg ptr u32[N] a, reg u32 B) -> reg u32 {
    reg u32 r;
    reg u32 q;
    r = 0;
    q = iQ;
    q -= 1;
    q = q >> 3;

    if (B >s q) {
        r = 1;
    }

    reg u32 t;

    reg u32 i; i = 0;
    while {
        #declassify t = a[i];
        t = -t if t <s 0;

        i += 1;

        if (t >=s B) {
            r = 1;
            i = N;
        }

    } (i != N)

    return r;
}

/*************************************************
 * Name:        JASMIN_MLDSA_poly_decompose
 *
 * Description: For all coefficients c of the input polynomial,
 *              compute high and low bits c0, c1 such c mod Q = c1*ALPHA + c0
 *              with -ALPHA/2 < c0 <= ALPHA/2 except c1 = (Q-1)/ALPHA where we
 *              set c1 = 0 and -ALPHA/2 <= c0 = c mod Q - Q < 0.
 *              Assumes coefficients to be standard representatives.
 *
 * Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
 *              - poly *a0: pointer to output polynomial with coefficients c0
 *              - const poly *a: pointer to input polynomial
 **************************************************/
// equivalent to _poly_decompose(a1, a0, a1)
fn _poly_decompose_inplace(reg ptr u32[N] a1, reg ptr u32[N] a0) -> reg ptr u32[N], reg ptr u32[N] {
    reg u32 i;
    reg u32 q;

    q = iQ;

    i = 0;
    while (i < N) {
        reg u32 a0_, a1_, a_;
        a_ = a1[i];
        a0_, a1_ = __decompose_a0a1(a_, q);
        a0[i] = a0_;
        a1[i] = a1_;
        i += 1;
    }

    return a1, a0;
}

inline fn __eta_minus_coeff(reg ptr u32[N] a, reg u32 i) -> reg u32 {
    reg u32 c;
    c = a[i];
    c = __imm_sub_reg(ETA, c);
    return c;
}

/*************************************************
 * Name:        JASMIN_MLDSA_poly_use_hint
 *
 * Description: Use hint polynomial to correct the high bits of a polynomial.
 *
 * Arguments:   - poly *b: pointer to output polynomial with corrected high bits
 *              - const poly *a: pointer to input polynomial
 *              - const poly *h: pointer to input hint polynomial
 **************************************************/

fn _poly_use_hint(
    reg ptr u32[N] polynomial,
    reg ptr u8[MAX_ONES_IN_HINT] hints,
    reg u32 number_of_hints
) -> reg ptr u32[N] {
    reg u32 i coefficient hint indicator;
    reg u32 hint_index;
    reg u32 in_list;

    reg u32 done;
    reg bool out_of_bounds;

    // TODO: Remove the passing of q here.
    reg u32 q = iQ;

    i = 0;
    while (i < N) {
        in_list = 0;

        hint_index = 0;

        while {
            out_of_bounds = hint_index >= number_of_hints;
            done = in_list;
            done = 1 if (out_of_bounds);
        } (done == 0) {
            indicator = (32u)hints[hint_index];
            if (i == indicator) {
                in_list = 1;
            }

            hint_index += 1;
        }

        if (in_list == 1) {
            hint = 1;
        } else {
            hint = 0;
        }

        coefficient = polynomial[i];
        coefficient = __use_hint(coefficient, hint, q);

        polynomial[i] = coefficient;
        i += 1;
    }

    return polynomial;
}

/*************************************************
 * Name:        JASMIN_MLDSA_poly_pointwise_montgomery
 *
 * Description: Pointwise multiplication of polynomials in NTT domain
 *              representation and multiplication of resulting polynomial
 *              by 2^{-32}.
 *
 * Arguments:   - poly *c: pointer to output polynomial
 *              - const poly *a: pointer to first input polynomial
 *              - const poly *b: pointer to second input polynomial
 **************************************************/
fn _poly_pointwise_montgomery(reg ptr u32[N] c, reg ptr u32[N] a, reg ptr u32[N] b) -> reg ptr u32[N] {
    reg u32 i, a_, b_, c_;
    i = 0;
    while(i < N)
    {
        a_ = a[i]; b_ = b[i];
        c_ = __mul_montgomery_reduce_8380417(a_, b_);
        c[i] = c_;
        i += 1;
    }
    return c;
}

fn _poly_pointwise_montgomery_inplace(reg ptr u32[N] c, reg ptr u32[N] a) -> reg ptr u32[N] {
    reg u32 i, a_, c_;
    i = 0;
    while(i < N)
    {
        a_ = a[i];
        c_ = c[i];
        c_ = __mul_montgomery_reduce_8380417(a_, c_);
        c[i] = c_;
        i += 1;
    }
    return c;
}

/*************************************************
 * Name:        JASMIN_MLDSA_poly_make_hint
 *
 * Description: Compute hint polynomial. The coefficients of which indicate
 *              whether the low bits of the corresponding coefficient of
 *              the input polynomial overflow into the high bits.
 *
 * Arguments:   - poly *h: pointer to output hint polynomial
 *              - const poly *a0: pointer to low part of input polynomial
 *              - const poly *a1: pointer to high part of input polynomial
 *
 * Returns number of 1 bits.
 **************************************************/
fn _poly_make_hint(reg ptr u32[N] h, reg ptr u32[N] a0, reg ptr u32[N] a1) -> reg u32, reg ptr u32[N]{
    reg u32 i, s, a0_, a1_, h_, gamma2;
    gamma2 = iGAMMA2;
    i = 0; s = 0;
    while(i < N)
    {
        a0_ = a0[i];
        a1_ = a1[i];
        h_ = __make_hint(a0_, a1_, gamma2);
        h[i] = h_;
        s += h_;
        i += 1;
    }
    return s, h;
}

/*************************************************
 * Name:        JASMIN_MLDSA_poly_power2round
 *
 * Description: For all coefficients c of the input polynomial,
 *              compute c0, c1 such that c mod Q = c1*2^D + c0
 *              with -2^{D-1} < c0 <= 2^{D-1}. Assumes coefficients to be
 *              standard representatives.
 *
 * Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
 *              - poly *a0: pointer to output polynomial with coefficients c0
 *              - const poly *a: pointer to input polynomial
 **************************************************/
fn _poly_power2round_inplace(reg ptr u32[N] a1, reg ptr u32[N] a0) -> reg ptr u32[N], reg ptr u32[N] {
    reg u32 i, a_, a0_, a1_;

    i = 0;
    while(i < N)
    {
        a_ = a1[i];
        a0_, a1_ = __power2round_a0a1(a_);
        a0[i] = a0_; a1[i] = a1_;
        i += 1;
    }
    return (a1, a0);
}

/*************************************************
 * Name:        JASMIN_MLDSA_poly_shiftl
 *
 * Description: Multiply polynomial by 2^D without modular reduction. Assumes
 *              input coefficients to be less than 2^{31-D} in absolute value.
 *
 * Arguments:   - poly *a: pointer to input/output polynomial
 **************************************************/
fn _poly_shiftl(reg ptr u32[N] a) -> reg ptr u32[N] {
    reg u32 i, a_;

    i = 0;
    while(i < N)
    {
        a_ = a[i];
        a_ <<= D;
        a[i] = a_;
        i += 1;
    }
    return a;
}

/*************************************************
 * Name:        JASMIN_MLDSA_poly_sub
 *
 * Description: Subtract polynomials. No modular reduction is
 *              performed.
 *
 * Arguments:   - poly *c: pointer to output polynomial
 *              - const poly *a: pointer to first input polynomial
 *              - const poly *b: pointer to second input polynomial to be
 *                               subtraced from first input polynomial
 **************************************************/
fn _poly_sub_inplace(reg ptr u32[N] a, reg ptr u32[N] b) -> reg ptr u32[N] {
    reg u32 i, a_, b_, c_;

    i = 0;
    while(i < N) {
        a_ = a[i];
        b_ = b[i];
        c_ = a_ - b_;
        a[i] = c_;
        i += 1;
    }
    return a;
}

/*************************************************
 * Name:        JASMIN_MLDSA_challenge
 *
 * Description: Implementation of H. Samples polynomial with TAU nonzero
 *              coefficients in {-1,1} using the output stream of
 *              SHAKE256(seed).
 *
 * Arguments:   - poly *c: pointer to output polynomial
 *              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
 **************************************************/
fn _poly_challenge(
    reg ptr u32[25 * 2] state,
    reg ptr u32[N] challenge,
    reg ptr u8[COMMITMENT_HASH_SIZE] commitment_hash
) -> reg ptr u32[25 * 2],
     reg ptr u32[N]
{
    () = #spill(challenge);
    state = __shake256_init_with_commitment_hash(state, commitment_hash);
    () = #unspill(challenge);

    reg u32[2] signs;
    stack u32[2] s_signs;

    reg u32 aux, pos, i;
    signs[0] = state[:u32 0];
    signs[1] = state[:u32 1];

    pos = 8;

    aux = 0;
    i = 0;
    while (i < N) {
        challenge[i] = aux;
        i += 1;
    }

    reg u32 j;
    j = N - TAU;
    reg u32 b;
    while (j < N) {
        while {
            if (pos >= SHAKE256_RATE) {
                pos = 0;

                // TODO: See if some spilling can be reduced here.
                () = #spill(j, challenge, pos);
                s_signs = #copy(signs);
                state = _keccakf1600_ref(state);

                () = #unspill(j, challenge, pos);
                signs = #copy(s_signs);
            }

            b = (32u) state[:u8 pos];
            pos += 1;
        } (b > j)

        aux = challenge[b];
        challenge[j] = aux;

        aux = signs[0] & 1;
        aux <<= 1;
        aux = __imm_sub_reg(1, aux);
        challenge[b] = aux;

        signs = __shift_right(signs, 1);

        j += 1;
    }

    return state, challenge;
}

inline fn __t1_by_challenge_helper(
    reg ptr u32[N] product,
    reg u32 sign,
    reg u32 index,
    reg ptr u8[POLYT1_PACKEDBYTES] t1_element_packed
) -> reg ptr u32[N] {
    reg u32 j offset;
    reg u32 lhs rhs;

    if (sign == 0) {
        j = 0;
        while {
            offset = index + j;
        } (offset < N) {
            lhs = product[offset];
            rhs = _t1_unpack_coefficient_at_index(t1_element_packed, j);

            lhs += rhs;

            product[offset] = lhs;

            j += 1;
        }

        j = N;
        j -= index;
        while (j < N) {
            offset = -N;
            offset += index;
            offset += j;

            lhs = product[offset];
            rhs = _t1_unpack_coefficient_at_index(t1_element_packed, j);

            lhs -= rhs;

            product[offset] = lhs;

            j += 1;
        }
    } else {
        j = 0;
        while {
            offset = index + j;
        } (offset < N) {
            lhs = product[offset];
            rhs = _t1_unpack_coefficient_at_index(t1_element_packed, j);

            lhs -= rhs;

            product[offset] = lhs;

            j += 1;
        }

        j = N;
        j -= index;
        while (j < N) {
            offset = -N;
            offset += index;
            offset += j;

            lhs = product[offset];
            rhs = _t1_unpack_coefficient_at_index(t1_element_packed, j);

            lhs += rhs;

            product[offset] = lhs;

            j += 1;
        }
    }

    return product;
}

fn _poly_schoolbook_multiply_t1_by_challenge(
    reg ptr u32[N] product,
    reg ptr u8[POLYT1_PACKEDBYTES] t1_element_packed,
    reg ptr u8[COMPRESSED_CHALLENGE_SIZE] compressed_challenge
) -> reg ptr u32[N]
{
    reg u32 sign signs index;

    reg u32 i zero;

    i = 0;
    zero = 0;
    while (i < N) {
        product[i] = zero;
        i += 1;
    }

    signs = compressed_challenge.[:u32 COMPRESSED_CHALLENGE_SIZE - 8];
    i = 0;
    while (i < 32) {
        index = (32u)compressed_challenge[i];
        i += 1;

        sign = signs & 1;
        signs >>= 1;

        product = __t1_by_challenge_helper(product, sign, index, t1_element_packed);
    }

    signs = compressed_challenge.[:u32 COMPRESSED_CHALLENGE_SIZE - 4];
    while (i < TAU) {
        index = (32u)compressed_challenge[i];
        i += 1;

        sign = signs & 1;
        signs >>= 1;

        product = __t1_by_challenge_helper(product, sign, index, t1_element_packed);
    }

    return product;
}

fn _poly_add_to_compressed_w1_at_index(
    reg ptr u8[COMPRESSED_W1_SIZE] compressed_w1_element,
    reg u32 coeff,
    reg u32 index
) -> reg ptr u8[COMPRESSED_W1_SIZE]
{
    reg u32 w1_coeff;
    reg u32 offset = 0;

    offset = 3;
    offset *= index;

    w1_coeff = __coefficient_from_3_bytes(compressed_w1_element[offset : 3]);
    w1_coeff += coeff;
    w1_coeff = _freeze(w1_coeff);

    compressed_w1_element[offset] = (8u)w1_coeff;
    w1_coeff >>= 8;
    offset += 1;

    compressed_w1_element[offset] = (8u)w1_coeff;
    w1_coeff >>= 8;
    offset += 1;

    compressed_w1_element[offset] = (8u)w1_coeff;

    return compressed_w1_element;
}

fn _poly_compute_Az_plus_w1(
    reg ptr u8[COMPRESSED_W1_SIZE] compressed_w1_element,
    reg ptr u32[25 * 2] xof_state, // for A
    reg ptr u8[SEEDBYTES] rho,
    reg u32 nonce,
    reg ptr u32[N] signer_response_element
) -> reg ptr u8[COMPRESSED_W1_SIZE],
     reg ptr u32[25 * 2]
{
    reg u32 sampled;
    reg u32 xof_offset;
    reg u32 coeff mask;

    inline bool b;

    () = #spill(signer_response_element, compressed_w1_element);

    xof_state = _prepare_xof_for_element_of_A(xof_state, rho, nonce);

    sampled = 0;
    while (sampled < N) {
        () = #spill(sampled);
        xof_state = _keccakf1600_ref(xof_state);
        () = #unspill(sampled);
        xof_offset = 0;
        while (xof_offset < SHAKE128_RATE) {
            if (sampled < N) {
                coeff = __coefficient_from_3_bytes(xof_state.[:u8 xof_offset : 3]);
                mask = 0x7F_FF_FF;
                coeff &= mask;
                xof_offset += 3;

                b = __cmp_b(coeff, iQ);
                if (b) {
                    () = #unspill(signer_response_element);
                    coeff = __mul_montgomery_reduce_8380417(coeff, signer_response_element[sampled]);

                    () = #unspill(compressed_w1_element);
                    compressed_w1_element = _poly_add_to_compressed_w1_at_index(compressed_w1_element, coeff, sampled);
                    () = #spill(compressed_w1_element);

                    sampled += 1;
                }
            } else {
                // We're done, break out of this loop.
                xof_offset = SHAKE128_RATE;
            }
        }
    }

    return compressed_w1_element, xof_state;
}

fn _poly_decompress_w1_element(
    reg ptr u32[N] w1_element,
    reg ptr u8[COMPRESSED_W1_SIZE] compressed_w1_element
) -> reg ptr u32[N]
{
    reg u32 coeff;
    reg u32 i;
    reg u32 offset;

    i = 0;
    while (i < N) {
        offset = 3;
        offset *= i;
        coeff = __coefficient_from_3_bytes(compressed_w1_element[offset : 3]);

        w1_element[i] = coeff;
        i += 1;
    }

    return w1_element;
}

fn _poly_compress_w1_element(
    reg ptr u8[COMPRESSED_W1_SIZE] compressed_w1_element,
    reg ptr u32[N] w1_element
) -> reg ptr u8[COMPRESSED_W1_SIZE]
{
    reg u32 coeff;
    reg u32 i;
    reg u32 offset;

    i = 0;
    while (i < N) {
        offset = 3;
        offset *= i;

        coeff = w1_element[i];
        i += 1;

        compressed_w1_element[offset] = (8u)coeff;
        offset += 1;
        coeff >>= 8;

        compressed_w1_element[offset] = (8u)coeff;
        offset += 1;
        coeff >>= 8;

        compressed_w1_element[offset] = (8u)coeff;
    }

    return compressed_w1_element;
}

fn _poly_subtract_from_compressed_w1_element(
    reg ptr u32[N] polynomial,
    reg ptr u8[COMPRESSED_W1_SIZE] compressed_w1_element
) -> reg ptr u32[N]
{
    reg u32 coeff w1_coeff;
    reg u32 i;
    reg u32 offset;

    i = 0;
    while (i < N) {
        offset = 3;
        offset *= i;
        w1_coeff = __coefficient_from_3_bytes(compressed_w1_element[offset : 3]);

        coeff = polynomial[i];
        w1_coeff -= coeff;

        polynomial[i] = w1_coeff;
        i += 1;
    }

    return polynomial;
}

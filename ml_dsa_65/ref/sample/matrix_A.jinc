require "../hashing.jinc"

inline
fn absorb_for_shake128(
    reg ptr u64[25] state,
    reg const ptr u8[32] rho,
    inline int i,
    inline int j
) -> reg ptr u64[25]
{
    reg u8 byte;
    inline int k;

    state = __keccak_init_ref1(state);

    for k = 0 to 32 {
        byte = rho[k];
        state[u8 k] = byte;
    }
    state[u8 32] = j;
    state[u8 33] = i;

    state[u8 34] = 0x1f;
    state[u8 SHAKE128_RATE - 1] = 0x80;

    return state;
}

inline
fn uniform_sample_polynomial(
    reg ptr u8[32] rho,
    inline int i,
    inline int j,
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] result,
    reg u64 msf
) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL], reg u64
{
    #public reg u32 try_coefficient byte;
    reg u64 xof_offset polynomial_offset;
    stack u64[25] state;

    inline int k;

    state = absorb_for_shake128(state, rho, i, j);

    () = #spill(result);
    state = _keccakf1600_ref1(state);
    () = #unspill(result);


    xof_offset = 0;

    polynomial_offset = 0;
    while(polynomial_offset < COEFFICIENTS_IN_POLYNOMIAL) {
        if(xof_offset >= SHAKE128_RATE) {
            () = #spill(result, polynomial_offset);
            state = _keccakf1600_ref1(state);
            () = #unspill(result, polynomial_offset);
            xof_offset = 0;
        }

        try_coefficient = 0;
        for k = 0 to 3 {
            #declassify byte = (32u)state[u8 xof_offset];
            byte <<= 8 * k;
            try_coefficient |= byte;

            xof_offset += 1;
        }
        try_coefficient &= 0x00_7F_FF_FF;

        if(try_coefficient < MODULUS) {
            result[polynomial_offset] = try_coefficient;
            polynomial_offset += 1;
        }
    }

    return result, msf;
}

namespace sample {
    inline
    fn matrix_A(
        #public stack u8[32] rho,
        reg u64 msf
    ) -> stack u32[ROWS_IN_MATRIX_A * COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL],
         reg u64
    {
        stack u32[ROWS_IN_MATRIX_A * COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] matrix_A;

        inline int i j;

        for i = 0 to ROWS_IN_MATRIX_A {
            for j = 0 to COLUMNS_IN_MATRIX_A {
                matrix_A[(i * COLUMNS_IN_MATRIX_A + j) * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL], msf =
                    uniform_sample_polynomial
                    (
                        rho,
                        i,
                        j,
                        matrix_A[(i * COLUMNS_IN_MATRIX_A + j) * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL],
                        msf
                    );
            }
        }

        return matrix_A, msf;
    }
}

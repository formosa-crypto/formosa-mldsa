require "../constants.jinc"
require "../hashing.jinc"

// N.B.: ETA is 4.

inline
fn absorb_rho_prime_for_shake256(
    reg ptr u64[25] state,
    #secret reg ptr u8[64] rho_prime,
    reg u16 index
) -> stack u64[25] {
    reg u8 byte;
    reg u64 i;

    state = __keccak_init_ref1(state);

    i = 0;
    while(i < 64) {
        byte = rho_prime[i];
        state[u8 i] = byte;
        i += 1;
    }

    state[u8 64] = (8u)index;

    // This can be set to 0 since index is never greater than
    // ROWS_IN_MATRIX_A + COLUMNS_IN_MATRIX_A.
    state[u8 65] = 0;

    state[u8 66] = 0x1f;
    state[u8 SHAKE256_RATE - 1] = 0x80;

    return state;
}

inline
fn sample_error_polynomial(
    #secret reg ptr u8[64] rho_prime,
    reg u16 index,
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] error
) -> #secret reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
{
    reg u64 coefficients_sampled;

    reg u64 xof_offset;
    stack u64[25] state;

    reg u8 byte;
    #public reg u32 try_coefficient;
    reg u32 temp;

    state = absorb_rho_prime_for_shake256(state, rho_prime, index);

    () = #spill(error);
    #declassify state = _keccakf1600_ref1(state);
    () = #unspill(error);

    coefficients_sampled = 0;
    xof_offset = 0;
    while (coefficients_sampled < COEFFICIENTS_IN_POLYNOMIAL) {
        if(xof_offset >= SHAKE256_RATE) {
            () = #spill(coefficients_sampled, error);
            state = _keccakf1600_ref1(state);
            () = #unspill(coefficients_sampled, error);
            xof_offset = 0;
        }

        byte = state[u8 xof_offset];
        xof_offset += 1;

        try_coefficient = (32u)byte;
        try_coefficient &= 0x0F;
        if (try_coefficient < 9) {
            temp = 4;
            temp -= try_coefficient;
            error[coefficients_sampled] = temp;

            coefficients_sampled += 1;
        }

        if (coefficients_sampled < COEFFICIENTS_IN_POLYNOMIAL) {
            try_coefficient = (32u)byte;
            try_coefficient >>= 4;
            if(try_coefficient < 9) {
                temp = 4;
                temp -= try_coefficient;
                error[coefficients_sampled] = temp;

                coefficients_sampled += 1;
            }
        }
    }

    return error;
}

namespace sample {
    inline
    fn error_vectors(#secret stack u8[64] rho_prime)
        -> #secret stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL],
           #secret stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] {
        stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s1;
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2;

        inline int i;

        for i = 0 to COLUMNS_IN_MATRIX_A {
            s1[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] =
                sample_error_polynomial
                (
                    rho_prime,
                    i,
                    s1[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL]
                );
        }

        for i = 0 to ROWS_IN_MATRIX_A {
            s2[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] =
                sample_error_polynomial
                (
                    rho_prime,
                    COLUMNS_IN_MATRIX_A + i,
                    s2[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL]
                );
        }

        return s1, s2;
    }
}

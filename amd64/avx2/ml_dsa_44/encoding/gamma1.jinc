namespace gamma1 {
    u256[2] ENCODING_SHIFTS_TABLE = {
        (8u32)[0, 14, 0, 14, 0, 14, 0, 14],
        (4u64)[28, 0, 28, 0]
    };
    fn coefficients_to_bytestream(reg u256 gamma1, reg u256 coefficients) -> reg u128, reg u128 {
        reg u256 shifts;
        reg u256 bytestream every_other;
        reg u128 bytestream_lower, bytestream_upper;

        coefficients = #VPSUB_8u32(gamma1, coefficients);

        shifts = ENCODING_SHIFTS_TABLE[0];
        bytestream = #VPSLLV_8u32(coefficients, shifts);
        bytestream = #VPSRL_4u64(bytestream, 14);

        every_other = #VPSRLDQ_256(bytestream, 8);
        every_other = #VPSLL_4u64(every_other, 36);

        bytestream = #VPADD_4u64(bytestream, every_other);
        shifts = ENCODING_SHIFTS_TABLE[1];
        bytestream = #VPSRLV_4u64(bytestream, shifts);

        bytestream_lower = #VEXTRACTI128(bytestream, 0);
        bytestream_upper = #VEXTRACTI128(bytestream, 1);

        return bytestream_lower, bytestream_upper;
    }


    inline
    fn encode_polynomial(
        reg ptr u8[ENCODED_GAMMA1_POLYNOMIAL_SIZE] output,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u8[ENCODED_GAMMA1_POLYNOMIAL_SIZE]
    {
        reg u256 coefficients;
        reg u128 lower upper;
        reg u256 gamma1;

        reg u64 temp;
        reg u64 input_offset output_offset;
        stack u8[16] final_output_block;

        inline int i;

        temp = GAMMA1;
        gamma1 = (256u)#VMOV_64(temp);
        gamma1 = #VPBROADCAST_8u32(gamma1);

        input_offset = 0;
        output_offset = 0;
        while (input_offset < BYTES_PER_UNCOMPRESSED_POLYNOMIAL - 32) {
            coefficients = polynomial.[:u256 input_offset];
            input_offset += 32;

            lower, upper = coefficients_to_bytestream(gamma1, coefficients);

            output.[:u128 output_offset] = lower;
            output_offset += 9;

            output.[:u128 output_offset] = upper;
            output_offset += 9;
        }

        coefficients = polynomial.[:u256 input_offset];

        lower, upper = coefficients_to_bytestream(gamma1, coefficients);

        output.[:u128 output_offset] = lower;
        output_offset += 9;

        final_output_block.[:u128 0] = upper;
        for i = 0 to 9 {
            output[output_offset + i] = final_output_block[i];
        }

        return output;
    }

    u256[2] DECODING_SHIFTS_TABLE = {
        (32u8)[-1, 15, 14, 13, -1, 13, 12, 11, -1, 11, 10, 9, -1, 9, 8, 7,
               -1, 8, 7, 6, -1, 6, 5, 4, -1, 4, 3, 2, -1, 2, 1, 0],
        (8u32)[6, 4, 2, 0, 6, 4, 2, 0]
    };
    inline
    fn decode_to_polynomial(
        reg ptr u8[ENCODED_GAMMA1_POLYNOMIAL_SIZE] bytes,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u128 sixteen_bytes;
        reg u256 coefficients;
        reg u256 gamma1 gamma1_times_2_mask;
        reg u256 shifts;

        reg u128 temp1;

        reg u64 temp;
        reg u64 output_offset input_offset;

        temp = GAMMA1;
        temp1 = #VMOV_64(temp);
        gamma1 = #VPBROADCAST_8u32(temp1);

        temp = (GAMMA1 << 1) - 1;
        temp1 = #VMOV_64(temp);
        gamma1_times_2_mask = #VPBROADCAST_8u32(temp1);

        coefficients = #set0_256();

        input_offset = 0;
        output_offset = 0;
        while (input_offset < ENCODED_GAMMA1_POLYNOMIAL_SIZE) {
            sixteen_bytes = bytes.[:u128 input_offset];
            input_offset += 2;

            coefficients = #VINSERTI128(coefficients, sixteen_bytes, 0);

            sixteen_bytes = bytes.[:u128 input_offset];
            input_offset += 16;

            coefficients = #VINSERTI128(coefficients, sixteen_bytes, 1);

            shifts = DECODING_SHIFTS_TABLE[0];
            coefficients = #VPSHUFB_256(coefficients, shifts);

            shifts = DECODING_SHIFTS_TABLE[1];
            coefficients = #VPSRLV_8u32(coefficients, shifts);

            coefficients = #VPAND_256(coefficients, gamma1_times_2_mask);
            coefficients = #VPSUB_8u32(gamma1, coefficients);

            polynomial.[:u256 output_offset] = coefficients;
            output_offset += 32;
        }

        return polynomial;
    }

    inline
    fn decode(
        reg ptr u8[GAMMA1_ENCODED_SIZE] encoded,
        reg ptr u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] decoded
    ) -> reg ptr u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int i;

        for i = 0 to COLUMNS_IN_MATRIX_A {

            decoded[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                decode_to_polynomial(
                    encoded[i * ENCODED_GAMMA1_POLYNOMIAL_SIZE : ENCODED_GAMMA1_POLYNOMIAL_SIZE],
                    decoded[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]
                );
        }

        return decoded;
    }
}

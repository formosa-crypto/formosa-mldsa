namespace coefficient {
    inline
    fn power2round(reg u32 r) -> reg u32, reg u32 {
        /*
        int32_t a1; //high bits

        a1 = (a + (1 << (D-1)) - 1) >> D;
        *a0 = a - (a1 << D);
        */
        reg u32 highbits, lowbits;
        reg u32 v32;

        highbits = r;
        highbits += (1 << (BITS_IN_LOWER_PART_OF_T - 1)) - 1;
        highbits >>= BITS_IN_LOWER_PART_OF_T;

        v32 = highbits;
        v32 <<= BITS_IN_LOWER_PART_OF_T;

        lowbits = r;
        lowbits -= v32;

        return highbits, lowbits;
    }

    inline
    fn make_hint(reg u32 a0, reg u32 a1, reg u64 msf) -> reg u32, #msf reg u64 {
        reg u32 result;
        inline bool condition;

        result = 0;

        condition = a0 >s GAMMA2;
        if (condition) {
            msf = #update_msf(condition, msf);

            result = 1;
        } else {
            msf = #update_msf(!condition, msf);

            condition = a0 <s -GAMMA2;
            if (condition) {
                msf = #update_msf(condition, msf);
                result = 1;
            } else {
                msf = #update_msf(!condition, msf);

                condition = a0 == -GAMMA2;
                if (condition) {
                    msf = #update_msf(condition, msf);

                    condition = a1 != 0;
                    if (condition) {
                        msf = #update_msf(condition, msf);
                        result = 1;
                    } else {
                        msf = #update_msf(!condition, msf);
                    }
                } else {
                    msf = #update_msf(!condition, msf);
                }
            }
        }

        return result, msf;
    }
}

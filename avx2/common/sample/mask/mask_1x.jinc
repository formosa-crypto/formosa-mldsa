inline
fn absorb_for_shake256(
    reg ptr u8[64] rho_prime,
    reg u16 domain_separator,
    stack u64[25] state
) -> stack u64[25] {
    reg u16 v;

    reg u256 copied_32_bytes;

    state = __keccak_init_ref1(state);

    copied_32_bytes = rho_prime.[:u256 0];
    state.[:u256 0] = copied_32_bytes;

    copied_32_bytes = rho_prime.[:u256 32];
    state.[:u256 32] = copied_32_bytes;

    v = domain_separator;
    v &= 0xFF;
    state[:u8 64] = (8u)v;

    v = domain_separator;
    v >>= 8;
    state[:u8 65] = (8u)v;

    state[:u8 66] ^= 0x1f;
    state[:u8 SHAKE256_RATE - 1] ^= 0x80;

    return state;
}

// We calculate ceil(a/b) = floor((a + b - 1) / b) where:
// a = ENCODED_GAMMA1_POLYNOMIAL_SIZE
// b = SHAKE256_RATE
param int BLOCKS_TO_EXTRACT =
    (ENCODED_GAMMA1_POLYNOMIAL_SIZE + SHAKE256_RATE - 1) / SHAKE256_RATE;

inline
fn sample_mask_polynomial_1x(
    reg ptr u8[64] rho_prime,
    reg u16 domain_separator,
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] mask
) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
    reg u64 mask_encoded_offset;

    reg u64 i;
    reg u8 byte;
    stack u64[25] state;
    stack u8[BLOCKS_TO_EXTRACT * SHAKE256_RATE] mask_encoded;

    reg u8 block_being_squeezed;

    state = absorb_for_shake256(rho_prime, domain_separator, state);

    block_being_squeezed = 0;
    mask_encoded_offset = 0;
    while (block_being_squeezed < BLOCKS_TO_EXTRACT) {
        () = #spill(block_being_squeezed, mask, mask_encoded_offset);
        state = _keccakf1600_ref1(state);
        () = #unspill(block_being_squeezed, mask, mask_encoded_offset);

        i = 0;
        while(i < SHAKE256_RATE) {
            byte = state[:u8 i];
            i += 1;

            mask_encoded[mask_encoded_offset] = byte;
            mask_encoded_offset += 1;
        }

        block_being_squeezed += 1;
    }

    mask = gamma1::decode_to_polynomial(mask_encoded[0 : ENCODED_GAMMA1_POLYNOMIAL_SIZE], mask);

    return mask;
}

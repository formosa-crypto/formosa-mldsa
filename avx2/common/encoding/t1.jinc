namespace t1 {
    u256[3] ENCODING_SHIFTS_TABLE = {
        (8u32)[0, 22, 0, 22, 0, 22, 0, 22],
        (8u32)[0, 0, 6, 4, 0, 0, 2, 0],
        (8u32)[0, 12, 0, 12, 0, 12, 0, 12]
    };
    fn encode_polynomial(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t1,
        reg ptr u8[T1_POLYNOMIAL_ENCODED_SIZE] t1_encoded
    ) -> reg ptr u8[T1_POLYNOMIAL_ENCODED_SIZE]
    {
        reg u256 combined shifts;
        reg u256 coefficients;

        reg u64 offset encoded_offset;

        offset = 0;
        encoded_offset = 0;
        while (offset < COEFFICIENTS_IN_POLYNOMIAL * 4) {
            coefficients = t1.[u256 offset];

            // Combine the 2 adjacent coefficients
            shifts = ENCODING_SHIFTS_TABLE[0]; // (8u32)[0, 22, 0, 22, 0, 22, 0, 22]
            combined = #VPSLLV_8u32(coefficients, shifts);
            combined = #VPSRL_4u64(combined, 22);

            // Combine the 4 adjacent coefficients
            shifts = ENCODING_SHIFTS_TABLE[1]; // (8u32)[0, 0, 6, 4, 0, 0, 2, 0]
            combined = #VPERMD(shifts, combined);

            shifts = ENCODING_SHIFTS_TABLE[2]; // (8u32)[0, 12, 0, 12, 0, 12, 0, 12]
            combined = #VPSLLV_8u32(combined, shifts);
            combined = #VPSRL_4u64(combined, 12);

            // We should now have 40 bits starting at position 0 in the lower
            // 128-bit lane of |combined|
            #VMOVDQU_128(t1_encoded.[u128 encoded_offset]) = #VEXTRACTI128(combined, 0);

            // and 40 bits starting at position 0 in the upper 128-bit lane
            // of |combined|
            #VMOVDQU_128(t1_encoded.[u128 encoded_offset + 5]) = #VEXTRACTI128(combined, 1);

            encoded_offset += 10;
            offset += 32;
        }

        return t1_encoded;
    }

    inline fn
    encode(
        reg ptr u8[T1_ENCODED_SIZE] encoded,
        #spill_to_mmx reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t1
    ) -> reg ptr u8[T1_ENCODED_SIZE]
    {
        inline int j;

        () = #spill(t1);

        for j = 0 to ROWS_IN_MATRIX_A {
            encoded[j * T1_POLYNOMIAL_ENCODED_SIZE : T1_POLYNOMIAL_ENCODED_SIZE] =
                encode_polynomial(
                    t1[COEFFICIENTS_IN_POLYNOMIAL * j : COEFFICIENTS_IN_POLYNOMIAL],
                    encoded[j * T1_POLYNOMIAL_ENCODED_SIZE : T1_POLYNOMIAL_ENCODED_SIZE]
                );

            () = #unspill(t1);
        }

        return encoded;
    }

    u256[2] DECODING_TABLE = {
        (32u8)[-1, -1, 9, 8, -1, -1, 8, 7, -1, -1, 7, 6, -1, -1, 6, 5, -1,
               -1, 4, 3, -1, -1, 3, 2, -1, -1, 2, 1, -1, -1, 1, 0],
        (8u32)[6, 4, 2, 0, 6, 4, 2, 0]
    };
    u256 mask = (8u32)[BITS_IN_UPPER_PART_OF_T_MASK,
                  BITS_IN_UPPER_PART_OF_T_MASK,
                  BITS_IN_UPPER_PART_OF_T_MASK,
                  BITS_IN_UPPER_PART_OF_T_MASK,
                  BITS_IN_UPPER_PART_OF_T_MASK,
                  BITS_IN_UPPER_PART_OF_T_MASK,
                  BITS_IN_UPPER_PART_OF_T_MASK,
                  BITS_IN_UPPER_PART_OF_T_MASK];

    fn decode_polynomial(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t1,
        reg ptr u8[T1_POLYNOMIAL_ENCODED_SIZE] t1_encoded
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 encoded_offset offset;

        reg u128 byte_chunk;

        reg u256 coefficients;
        reg u256 shifts;

        encoded_offset = 0;
        offset = 0;
        while (offset < COEFFICIENTS_IN_POLYNOMIAL * 4) {
            // We process only 10 bytes at a time.
            byte_chunk = t1_encoded.[u128 encoded_offset];
            encoded_offset += 10;

            coefficients = #VINSERTI128(coefficients, byte_chunk, 0);
            coefficients = #VINSERTI128(coefficients, byte_chunk, 1);

            shifts = DECODING_TABLE[0];
            coefficients = #VPSHUFB_256(coefficients, shifts);

            shifts = DECODING_TABLE[1];
            coefficients = #VPSRLV_8u32(coefficients, shifts);

            coefficients = #VPAND_256(coefficients, mask);

            t1.[u256 offset] = coefficients;
            offset += 32;
        }

        return t1;
    }

}

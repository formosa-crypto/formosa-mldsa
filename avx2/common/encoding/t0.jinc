namespace t0 {
    fn change_t0_interval(reg u32 coefficient) -> reg u32
    {
        coefficient = -coefficient;
        coefficient += (1 << BITS_IN_LOWER_PART_OF_T) / 2;

        return coefficient;
    }
    fn encode_polynomial(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t0,
        reg ptr u8[T0_POLYNOMIAL_ENCODED_SIZE] encoded
    ) -> reg ptr u8[T0_POLYNOMIAL_ENCODED_SIZE]
    {
        stack u32[8] t;

        reg u64 i;
        reg u64 encoded_offset t0_offset;

        reg u32 coefficient;

        reg u8 c c1;

        encoded_offset = 0;
        t0_offset = 0;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL / 8) {
            // r[13*i + 0] = t[0];

            coefficient = t0[t0_offset];
            t0_offset += 1;
            coefficient = change_t0_interval(coefficient);
            t[0] = coefficient;

            c = (8u) coefficient;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            // r[13*i+ 1] = t[0] >> 8;
            // r[13*i+ 1] |=  t[1] << 5;

            coefficient = t[0];
            coefficient >>= 8;
            c = (8u)coefficient;

            coefficient = t0[t0_offset];
            t0_offset += 1;
            coefficient = change_t0_interval(coefficient);
            t[1] = coefficient;

            coefficient <<= 5;
            c1 = (8u) coefficient;
            c |= c1;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            //r[13*i+ 2]  =  t[1] >>  3;

            coefficient = t[1];
            coefficient >>= 3;
            c = (8u) coefficient;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            // r[13*i+ 3]  =  t[1] >> 11;
            // r[13*i+ 3] |=  t[2] <<  2;

            coefficient = t[1];
            coefficient >>= 11;
            c = (8u) coefficient;

            coefficient = t0[t0_offset];
            t0_offset += 1;
            coefficient = change_t0_interval(coefficient);
            t[2] = coefficient;

            coefficient <<= 2;
            c1 = (8u) coefficient;
            c |= c1;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            //r[13*i+ 4]  =  t[2] >>  6;
            //r[13*i+ 4] |=  t[3] <<  7;

            coefficient = t[2];
            coefficient >>= 6;
            c = (8u) coefficient;

            coefficient = t0[t0_offset];
            t0_offset += 1;
            coefficient = change_t0_interval(coefficient);
            t[3] = coefficient;

            coefficient <<= 7;
            c1 = (8u) coefficient;
            c |= c1;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            //r[13*i+ 5]  =  t[3] >>  1;

            coefficient = t[3];
            coefficient >>= 1;
            c = (8u) coefficient;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            //r[13*i+ 6]  =  t[3] >>  9;
            //r[13*i+ 6] |=  t[4] <<  4;

            coefficient = t[3];
            coefficient >>= 9;
            c = (8u) coefficient;

            coefficient = t0[t0_offset];
            t0_offset += 1;
            coefficient = change_t0_interval(coefficient);
            t[4] = coefficient;

            coefficient <<= 4;
            c1 = (8u) coefficient;
            c |= c1;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            //r[13*i+ 7]  =  t[4] >>  4;

            coefficient = t[4];
            coefficient >>= 4;
            c = (8u) coefficient;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            //r[13*i+ 8]  =  t[4] >> 12;
            //r[13*i+ 8] |=  t[5] <<  1;

            coefficient = t[4];
            coefficient >>= 12;
            c = (8u) coefficient;

            coefficient = t0[t0_offset];
            t0_offset += 1;
            coefficient = change_t0_interval(coefficient);
            t[5] = coefficient;

            coefficient <<= 1;
            c1 = (8u) coefficient;
            c |= c1;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            //r[13*i + 9]  =  t[5] >>  7;
            //r[13*i +  9] |=  t[6] <<  6;

            coefficient = t[5];
            coefficient >>= 7;
            c = (8u) coefficient;

            coefficient = t0[t0_offset];
            t0_offset += 1;
            coefficient = change_t0_interval(coefficient);
            t[6] = coefficient;

            coefficient <<= 6;
            c1 = (8u) coefficient;
            c |= c1;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            // r[13*i+10] = t[6] >> 2;

            coefficient = t[6];
            coefficient >>= 2;
            c = (8u) coefficient;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            //r[13*i+11]  =  t[6] >> 10;
            //r[13*i+11] |=  t[7] <<  3;

            coefficient = t[6];
            coefficient >>= 10;
            c = (8u) coefficient;

            coefficient = t0[t0_offset];
            t0_offset += 1;
            coefficient = change_t0_interval(coefficient);
            t[7] = coefficient;

            coefficient <<= 3;
            c1 = (8u) coefficient;
            c |= c1;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            //r[13*i+12]  =  t[7] >>  5;

            coefficient = t[7];
            coefficient >>= 5;
            c = (8u) coefficient;
            encoded[encoded_offset] = c;
            encoded_offset += 1;

            i += 1;
        }

        return encoded;
    }

    inline fn encode(
        reg ptr u8[T0_ENCODED_SIZE] encoded,
        #spill_to_mmx reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t0
    ) -> reg ptr u8[T0_ENCODED_SIZE]
    {
        inline int j;

        () = #spill(t0);

        for j = 0 to ROWS_IN_MATRIX_A {
            encoded[j * T0_POLYNOMIAL_ENCODED_SIZE : T0_POLYNOMIAL_ENCODED_SIZE] =
                encode_polynomial(
                    t0[COEFFICIENTS_IN_POLYNOMIAL * j : COEFFICIENTS_IN_POLYNOMIAL],
                    encoded[j * T0_POLYNOMIAL_ENCODED_SIZE : T0_POLYNOMIAL_ENCODED_SIZE]
                );
            () = #unspill(t0);
        }

        return encoded;
    }

    u256[4] DECODING_TABLE = {
        (32u8)[
            -1, -1, 12, 11, -1, 11, 10, 9,
            -1, -1, 9, 8, -1, 8, 7, 6, -1,
            6, 5, 4, -1, -1, 4, 3, -1, 3,
            2, 1, -1, -1, 1, 0
        ],
        (8u32)[3, 6, 1, 4, 7, 2, 5, 0],
        (8u32)[
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK
        ],
        (8u32)[
            (1 << BITS_IN_LOWER_PART_OF_T) / 2,
            (1 << BITS_IN_LOWER_PART_OF_T) / 2,
            (1 << BITS_IN_LOWER_PART_OF_T) / 2,
            (1 << BITS_IN_LOWER_PART_OF_T) / 2,
            (1 << BITS_IN_LOWER_PART_OF_T) / 2,
            (1 << BITS_IN_LOWER_PART_OF_T) / 2,
            (1 << BITS_IN_LOWER_PART_OF_T) / 2,
            (1 << BITS_IN_LOWER_PART_OF_T) / 2
        ]
    };

    inline
    fn decode_polynomial(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t0,
        reg ptr u8[T0_POLYNOMIAL_ENCODED_SIZE] t0_encoded
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 encoded_offset offset;

        reg u128 byte_chunk;

        reg u256 coefficients;
        reg u256 shifts mask;

        encoded_offset = 0;
        offset = 0;
        while (offset < COEFFICIENTS_IN_POLYNOMIAL * 4) {
            // We process only 13 bytes at a time.
            byte_chunk = t0_encoded.[u128 encoded_offset];
            encoded_offset += 13;

            coefficients = #VINSERTI128(coefficients, byte_chunk, 0);
            coefficients = #VINSERTI128(coefficients, byte_chunk, 1);

            shifts = DECODING_TABLE[0];
            coefficients = #VPSHUFB_256(coefficients, shifts);

            shifts = DECODING_TABLE[1];
            coefficients = #VPSRLV_8u32(coefficients, shifts);

            mask = DECODING_TABLE[2];
            coefficients = #VPAND_256(coefficients, mask);

            shifts = DECODING_TABLE[3];
            coefficients = #VPSUB_8u32(shifts, coefficients);

            t0.[u256 offset] = coefficients;
            offset += 32;
        }

        return t0;
    }

    inline fn
    decode(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t0,
           reg ptr u8[T0_ENCODED_SIZE] encoded) ->
           reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int i;

        for i = 0 to ROWS_IN_MATRIX_A {
            t0[i * COEFFICIENTS_IN_POLYNOMIAL: COEFFICIENTS_IN_POLYNOMIAL] =
                decode_polynomial(
                    t0[i * COEFFICIENTS_IN_POLYNOMIAL: COEFFICIENTS_IN_POLYNOMIAL],
                    encoded[T0_POLYNOMIAL_ENCODED_SIZE * i : T0_POLYNOMIAL_ENCODED_SIZE]
                );
        }

        return t0;
    }
}

namespace t0 {
    u256[4] ENCODING_SHIFTS_TABLE = {
        (8u32)[0, 19, 0, 19, 0, 19, 0, 19],
        (8u32)[0, 0, 0, 0, 6, 4, 2, 0],
        (8u32)[0, 6, 0, 6, 0, 6, 0, 6],
        (4u64)[0, 0, 12, 0]
    };
    fn encode_polynomial(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t0,
        reg ptr u8[T0_POLYNOMIAL_ENCODED_SIZE] t0_encoded
    ) -> reg ptr u8[T0_POLYNOMIAL_ENCODED_SIZE]
    {
        reg u256 combined second_4_combined shifts;
        reg u256 coefficients;

        reg u64 offset encoded_offset;

        offset = 0;
        encoded_offset = 0;
        while (offset < COEFFICIENTS_IN_POLYNOMIAL * 4) {
            coefficients = t0.[u256 offset];

            shifts = HALF_OF_BITS_IN_T0_VECTOR;
            coefficients = #VPSUB_8u32(shifts, coefficients);

            // Combine the 2 adjacent coefficients
            shifts = ENCODING_SHIFTS_TABLE[0];
            combined = #VPSLLV_8u32(coefficients, shifts);
            combined = #VPSRL_4u64(combined, 19);

            // Combine the 4 adjacent coefficients
            shifts = ENCODING_SHIFTS_TABLE[1];
            combined = #VPERMD(shifts, combined);

            shifts = ENCODING_SHIFTS_TABLE[2];
            combined = #VPSLLV_8u32(combined, shifts);
            combined = #VPSRL_4u64(combined, 6);

            second_4_combined = #VPSRLDQ_256(combined, 8);
            second_4_combined = #VPSLL_4u64(second_4_combined, 52);

            combined = #VPADD_4u64(combined, second_4_combined);

            shifts = ENCODING_SHIFTS_TABLE[3];
            combined = #VPSRLV_4u64(combined, shifts);

            // We should now have 104 bits starting at position 0 in the lower
            // 128-bit lane of |combined|
            #VMOVDQU_128(t0_encoded.[u128 encoded_offset]) = #VEXTRACTI128(combined, 0);

            encoded_offset += 13;
            offset += 32;
        }

        return t0_encoded;
    }

    inline fn encode(
        reg ptr u8[T0_ENCODED_SIZE] encoded,
        #spill_to_mmx reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t0
    ) -> reg ptr u8[T0_ENCODED_SIZE]
    {
        inline int j;

        () = #spill(t0);

        for j = 0 to ROWS_IN_MATRIX_A {
            encoded[j * T0_POLYNOMIAL_ENCODED_SIZE : T0_POLYNOMIAL_ENCODED_SIZE] =
                encode_polynomial(
                    t0[COEFFICIENTS_IN_POLYNOMIAL * j : COEFFICIENTS_IN_POLYNOMIAL],
                    encoded[j * T0_POLYNOMIAL_ENCODED_SIZE : T0_POLYNOMIAL_ENCODED_SIZE]
                );
            () = #unspill(t0);
        }

        return encoded;
    }

    u256[3] DECODING_TABLE = {
        (32u8)[
            -1, -1, 12, 11, -1, 11, 10, 9,
            -1, -1, 9, 8, -1, 8, 7, 6, -1,
            6, 5, 4, -1, -1, 4, 3, -1, 3,
            2, 1, -1, -1, 1, 0
        ],
        (8u32)[3, 6, 1, 4, 7, 2, 5, 0],
        (8u32)[
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK,
            BITS_IN_LOWER_PART_OF_T_MASK
        ]
    };

    inline
    fn decode_polynomial(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t0,
        reg ptr u8[T0_POLYNOMIAL_ENCODED_SIZE] t0_encoded
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 encoded_offset offset;

        reg u128 byte_chunk;

        reg u256 coefficients;
        reg u256 shifts mask;

        coefficients = #set0_256();

        encoded_offset = 0;
        offset = 0;
        while (offset < COEFFICIENTS_IN_POLYNOMIAL * 4) {
            // We process only 13 bytes at a time.
            byte_chunk = t0_encoded.[u128 encoded_offset];
            encoded_offset += 13;

            coefficients = #VINSERTI128(coefficients, byte_chunk, 0);
            coefficients = #VINSERTI128(coefficients, byte_chunk, 1);

            shifts = DECODING_TABLE[0];
            coefficients = #VPSHUFB_256(coefficients, shifts);

            shifts = DECODING_TABLE[1];
            coefficients = #VPSRLV_8u32(coefficients, shifts);

            mask = DECODING_TABLE[2];
            coefficients = #VPAND_256(coefficients, mask);

            shifts = HALF_OF_BITS_IN_T0_VECTOR;
            coefficients = #VPSUB_8u32(shifts, coefficients);

            t0.[u256 offset] = coefficients;
            offset += 32;
        }

        return t0;
    }

    inline fn
    decode(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t0,
           reg ptr u8[T0_ENCODED_SIZE] encoded) ->
           reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int i;

        for i = 0 to ROWS_IN_MATRIX_A {
            t0[i * COEFFICIENTS_IN_POLYNOMIAL: COEFFICIENTS_IN_POLYNOMIAL] =
                decode_polynomial(
                    t0[i * COEFFICIENTS_IN_POLYNOMIAL: COEFFICIENTS_IN_POLYNOMIAL],
                    encoded[T0_POLYNOMIAL_ENCODED_SIZE * i : T0_POLYNOMIAL_ENCODED_SIZE]
                );
        }

        return t0;
    }
}

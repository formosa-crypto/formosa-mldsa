param int KECCAK_ROUNDS=24;

param int MODULUS = 8_380_417;

u256 MODULUS_VECTOR = (8u32)[
    MODULUS,
    MODULUS,
    MODULUS,
    MODULUS,
    MODULUS,
    MODULUS,
    MODULUS,
    MODULUS
];

param int BITS_IN_LOWER_PART_OF_T = 13;
param int BITS_IN_LOWER_PART_OF_T_MASK = (1 << BITS_IN_LOWER_PART_OF_T) - 1;

u256 HALF_OF_BITS_IN_T0_VECTOR = (8u32)[
    (1 << BITS_IN_LOWER_PART_OF_T) / 2,
    (1 << BITS_IN_LOWER_PART_OF_T) / 2,
    (1 << BITS_IN_LOWER_PART_OF_T) / 2,
    (1 << BITS_IN_LOWER_PART_OF_T) / 2,
    (1 << BITS_IN_LOWER_PART_OF_T) / 2,
    (1 << BITS_IN_LOWER_PART_OF_T) / 2,
    (1 << BITS_IN_LOWER_PART_OF_T) / 2,
    (1 << BITS_IN_LOWER_PART_OF_T) / 2
];

param int BITS_IN_UPPER_PART_OF_T_MASK = (1 << 10) - 1;

param int COEFFICIENTS_IN_POLYNOMIAL = 256;
param int LOG_2_COEFFICIENTS_IN_POLYNOMIAL = 8;
param int BYTES_PER_UNCOMPRESSED_POLYNOMIAL = (COEFFICIENTS_IN_POLYNOMIAL * 32) / 8;

// This amounts to 416.
param int T0_POLYNOMIAL_ENCODED_SIZE = (BITS_IN_LOWER_PART_OF_T * COEFFICIENTS_IN_POLYNOMIAL) / 8;

// 23 = log_2(MODULUS - 1).
param int T1_POLYNOMIAL_ENCODED_SIZE = ((23 - BITS_IN_LOWER_PART_OF_T) * COEFFICIENTS_IN_POLYNOMIAL) / 8; // 320

param int SEED_FOR_MATRIX_A_SIZE = 32;
param int SEED_FOR_ERROR_VECTORS_SIZE = 64;
param int SEED_FOR_SIGNING_SIZE = 32;
param int VERIFICATION_KEY_HASH_SIZE = 64;
param int MESSAGE_REPRESENTATIVE_SIZE = 64;

param int START_OF_S1_IN_ENCODED_SIGNING_KEY =
    SEED_FOR_MATRIX_A_SIZE +
    SEED_FOR_SIGNING_SIZE +
    VERIFICATION_KEY_HASH_SIZE;

param int SHAKE128_RATE = 168;
param int SHAKE256_RATE = 136;

param int COEFFICIENTS_PER_YMM_REGISTER = 8;

param int KECCAK_ROUNDS=24;
require "keccak_4x/api.jinc"

fn __shake128_squeezeblock4x(
    reg ptr u256[25] state,
    reg ptr u8[SHAKE128_RATE] h0 h1 h2 h3
) ->
    reg ptr u256[25],
    reg ptr u8[SHAKE128_RATE],
    reg ptr u8[SHAKE128_RATE],
    reg ptr u8[SHAKE128_RATE],
    reg ptr u8[SHAKE128_RATE]
{
    reg u256 t256;
    reg u128 t128;
    inline int i;
    reg u64 ms;

    #inline state, ms = _KeccakF1600_StatePermute4x(state, ms);

    for i = 0 to (SHAKE128_RATE / 8) {
        t256 = state[i];
        t128 = (128u)t256;
        h0[u64 i] = #VMOVLPD(t128);
        h1[u64 i] = #VMOVHPD(t128);
        t128 = #VEXTRACTI128(t256, 1);
        h2[u64 i] = #VMOVLPD(t128);
        h3[u64 i] = #VMOVHPD(t128);
    }

    return state, h0, h1, h2, h3;
}

fn __shake256_squeezeblock4x(
    reg ptr u256[25] state,
    reg ptr u8[SHAKE256_RATE] h0 h1 h2 h3
) ->
    reg ptr u256[25],
    reg ptr u8[SHAKE256_RATE],
    reg ptr u8[SHAKE256_RATE],
    reg ptr u8[SHAKE256_RATE],
    reg ptr u8[SHAKE256_RATE]
{
    reg u256 t256;
    reg u128 t128;
    inline int i;
    reg u64 ms;

    #inline state, ms = _KeccakF1600_StatePermute4x(state, ms);

    for i = 0 to (SHAKE256_RATE / 8) {
        t256 = state[i];
        t128 = (128u)t256;
        h0[u64 i] = #VMOVLPD(t128);
        h1[u64 i] = #VMOVHPD(t128);
        t128 = #VEXTRACTI128(t256, 1);
        h2[u64 i] = #VMOVLPD(t128);
        h3[u64 i] = #VMOVHPD(t128);
    }

    return state, h0, h1, h2, h3;
}

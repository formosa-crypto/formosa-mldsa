require "../parameters.jinc"

namespace gamma1 {
    u256[2] ENCODING_SHIFTS_TABLE = {
        (8u32)[0, 12, 0, 12, 0, 12, 0, 12],
        (32u8)[
            -1, -1, -1, -1, -1, -1, 12, 11,
            10, 9, 8, 4, 3, 2, 1, 0, -1, -1,
            -1, -1, -1, -1, 12, 11, 10, 9, 8,
            4, 3, 2, 1, 0]
    };
    inline
    fn encode_polynomial(
        reg ptr u8[ENCODED_GAMMA1_POLYNOMIAL_SIZE] encoded,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u8[ENCODED_GAMMA1_POLYNOMIAL_SIZE]
    {
        reg u256 coefficients combined;
        reg u128 encoded_coefficients;
        reg u256 gamma1;
        reg u256 shifts;

        reg u64 temp;
        reg u64 offset encoded_offset;

        temp = GAMMA1;
        gamma1 = (256u)#VMOV_64(temp);
        gamma1 = #VPBROADCAST_8u32(gamma1);

        offset = 0;
        encoded_offset = 0;
        while (offset < COEFFICIENTS_IN_POLYNOMIAL * 4) {
            coefficients = polynomial.[u256 offset];
            offset += 32;

            coefficients = #VPSUB_8u32(gamma1, coefficients);

            shifts = ENCODING_SHIFTS_TABLE[0];
            combined = #VPSLLV_8u32(coefficients, shifts);
            combined = #VPSRL_4u64(combined, 12);

            shifts = ENCODING_SHIFTS_TABLE[1];
            combined = #VPSHUFB_256(combined, shifts);

            // We now have 80 bits starting at position 0 in the lower 128-bit lane
            encoded_coefficients = #VEXTRACTI128(combined, 0);
            encoded.[u128 encoded_offset] = encoded_coefficients;
            encoded_offset += 10;

            // ... and 80 more bits at position 0 in the upper 128-bit lane
            encoded_coefficients = #VEXTRACTI128(combined, 1);
            encoded.[u128 encoded_offset] = encoded_coefficients;
            encoded_offset += 10;
        }

        return encoded;
    }

    u256[2] DECODING_SHIFTS_TABLE = {
        (32u8)[-1, 15, 14, 13, -1, 13, 12,
               11, -1, 10, 9, 8, -1, 8, 7,
               6, -1, 9, 8, 7, -1, 7, 6, 5,
               -1, 4, 3, 2, -1, 2, 1, 0],
        (8u32)[4, 0, 4, 0, 4, 0, 4, 0]
    };
    inline
    fn decode_to_polynomial(
        reg ptr u8[ENCODED_GAMMA1_POLYNOMIAL_SIZE] bytes,
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u128 sixteen_bytes;
        reg u256 coefficients;
        reg u256 gamma1 gamma1_times_2_mask;
        reg u256 shifts;

        reg u64 temp;
        reg u64 offset encoded_offset;

        temp = GAMMA1;
        gamma1 = (256u)#VMOV_64(temp);
        gamma1 = #VPBROADCAST_8u32(gamma1);

        temp = (GAMMA1 << 1) - 1;
        gamma1_times_2_mask = (256u)#VMOV_64(temp);
        gamma1_times_2_mask = #VPBROADCAST_8u32(gamma1_times_2_mask);

        encoded_offset = 0;
        offset = 0;
        while (encoded_offset < ENCODED_GAMMA1_POLYNOMIAL_SIZE) {
            sixteen_bytes = bytes.[u128 encoded_offset];
            encoded_offset += 4;

            coefficients = #VINSERTI128(coefficients, sixteen_bytes, 0);

            sixteen_bytes = bytes.[u128 encoded_offset];
            encoded_offset += 16;

            coefficients = #VINSERTI128(coefficients, sixteen_bytes, 1);

            shifts = DECODING_SHIFTS_TABLE[0];
            coefficients = #VPSHUFB_256(coefficients, shifts);

            shifts = DECODING_SHIFTS_TABLE[1];
            coefficients = #VPSRLV_8u32(coefficients, shifts);

            coefficients = #VPAND_256(coefficients, gamma1_times_2_mask);
            coefficients = #VPSUB_8u32(gamma1, coefficients);

            polynomial.[u256 offset] = coefficients;
            offset += 32;
        }

        return polynomial;
    }

    inline
    fn decode(
        reg ptr u8[GAMMA1_ENCODED_SIZE] encoded,
        reg ptr u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] decoded
    ) -> reg ptr u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int i;

        for i = 0 to COLUMNS_IN_MATRIX_A {

            decoded[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                decode_to_polynomial(
                    encoded[i * ENCODED_GAMMA1_POLYNOMIAL_SIZE : ENCODED_GAMMA1_POLYNOMIAL_SIZE],
                    decoded[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]
                );
        }

        return decoded;
    }
}

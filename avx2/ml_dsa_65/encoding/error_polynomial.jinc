namespace error_polynomial {
    u256 ENCODING_SHUFFLES = (32u8)[
        15, 14, 7, 6, 13, 12, 5, 4,
        11, 10, 3, 2, 9, 8, 1, 0, 15,
        14, 7, 6, 13, 12, 5, 4, 11, 10,
        3, 2, 9, 8, 1, 0
    ];
    fn encode(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial,
        reg ptr u8[ENCODED_ERROR_POLYNOMIAL_SIZE] encoded
    ) -> reg ptr u8[ENCODED_ERROR_POLYNOMIAL_SIZE]
    {
        reg u256 c0 c1 c2 c3 c4 c5 c6 c7;
        reg u256 shift encoding_shuffles;
        reg u256 eta;

        reg u64 input_offset output_offset temp;

        temp = (16 << 8) + 1;
        shift = (256u)#VMOV(temp);
        shift = #VPBROADCAST_16u16(shift);

        temp = ETA;
        eta = (256u)#VMOV(temp);
        eta = #VPBROADCAST_8u32(eta);

        encoding_shuffles = ENCODING_SHUFFLES;

        input_offset = 0;
        output_offset = 0;
        while (input_offset < BYTES_PER_UNCOMPRESSED_POLYNOMIAL) {
            c0 = polynomial.[u256 input_offset];
            c0 = #VPSUB_8u32(eta, c0);
            input_offset += 32;

            c1 = polynomial.[u256 input_offset];
            c1 = #VPSUB_8u32(eta, c1);
            input_offset += 32;

            c2 = polynomial.[u256 input_offset];
            c2 = #VPSUB_8u32(eta, c2);
            input_offset += 32;

            c3 = polynomial.[u256 input_offset];
            c3 = #VPSUB_8u32(eta, c3);
            input_offset += 32;

            c4 = polynomial.[u256 input_offset];
            c4 = #VPSUB_8u32(eta, c4);
            input_offset += 32;

            c5 = polynomial.[u256 input_offset];
            c5 = #VPSUB_8u32(eta, c5);
            input_offset += 32;

            c6 = polynomial.[u256 input_offset];
            c6 = #VPSUB_8u32(eta, c6);
            input_offset += 32;

            c7 = polynomial.[u256 input_offset];
            c7 = #VPSUB_8u32(eta, c7);
            input_offset += 32;

            c0 = #VPACKUS_8u32(c0, c1);
            c1 = #VPACKUS_8u32(c2, c3);
            c2 = #VPACKUS_8u32(c4, c5);
            c3 = #VPACKUS_8u32(c6, c7);

            c0 = #VPACKUS_16u16(c0, c1);
            c1 = #VPACKUS_16u16(c2, c3);

            c0 = #VPMADDUBSW_256(c0, shift);
            c1 = #VPMADDUBSW_256(c1, shift);

            c0 = #VPACKUS_16u16(c0, c1);
            c0 = #VPERMQ(c0, 0b1_1_0_1_1_0_0_0);

            c0 = #VPSHUFB_256(c0, encoding_shuffles);

            encoded.[u256 output_offset] = c0;
            output_offset += 32;
        }

        return encoded;
    }

    u256 DECODING_SHUFFLES = (32u8)[
        -1, -1, -1, 3,
        -1, -1, -1, 3,
        -1, -1, -1, 2,
        -1, -1, -1, 2,
        -1, -1, -1, 1,
        -1, -1, -1, 1,
        -1, -1, -1, 0,
        -1, -1, -1, 0
    ];
    u256 SHIFTS = (8u32)[4, 0, 4, 0, 4, 0, 4, 0];
    fn decode(
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] decoded,
        reg ptr u8[ENCODED_ERROR_POLYNOMIAL_SIZE] encoded
    ) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u128 bytes;

        reg u256 coefficients;
        reg u256 decoding_shuffles;
        reg u256 mask shifts;
        reg u256 eta;

        reg u64 input_offset output_offset temp;
        reg u64 byte_group;

        temp = (1 << 4) - 1;
        mask = (256u)#VMOV(temp);
        mask = #VPBROADCAST_8u32(mask);

        temp = ETA;
        eta = (256u)#VMOV(temp);
        eta = #VPBROADCAST_8u32(eta);

        decoding_shuffles = DECODING_SHUFFLES;
        shifts = SHIFTS;

        coefficients = #set0_256();

        input_offset = 0;
        output_offset = 0;
        while (input_offset < ENCODED_ERROR_POLYNOMIAL_SIZE) {
            bytes = encoded.[u128 input_offset];
            input_offset += 16;

            byte_group = 0;
            while (byte_group < 4) {
                coefficients = #VINSERTI128(coefficients, bytes, 0);
                coefficients = #VINSERTI128(coefficients, bytes, 1);

                coefficients = #VPSHUFB_256(coefficients, decoding_shuffles);
                coefficients = #VPSRLV_8u32(coefficients, shifts);
                coefficients = #VPAND_256(coefficients, mask);

                coefficients = #VPSUB_8u32(eta, coefficients);

                decoded.[u256 output_offset] = coefficients;
                output_offset += 32;

                bytes = #VPSRLDQ_128(bytes, 4);
                byte_group += 1;
            }
        }

        return decoded;
    }
}

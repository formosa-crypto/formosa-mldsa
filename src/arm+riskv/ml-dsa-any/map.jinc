// /////////////////////////////////////////////////////////////////////////////
// maps

inline fn __map1__reduce32_8380417(reg ptr u32[256] a) -> reg ptr u32[256]
{
  reg u32 i; // ideally: reg size i; // similar to size_t
  inline int j;
  reg u32 elem;

  i = 0;
  while(i < N)
  {
    for j=0 to 1
    {
      elem = a[(int) i];
      elem = __reduce32_8380417(elem);
      a[(int) i] = elem;
      i += 1;
    }
  }

  for j=0 to (N % 1)
  {
    elem = a[(int) i];
    elem = __reduce32_8380417(elem);
    a[(int) i] = elem;
    i += 1;
  }

  return a;
}//<>

inline fn __map1__caddq(reg ptr u32[256] a) -> reg ptr u32[256]
{
  reg u32 i; // ideally: reg size i; // similar to size_t
  inline int j;
  reg u32 elem;

  i = 0;
  while(i < N)
  {
    for j=0 to 1
    {
      elem = a[(int) i];
      elem = __caddq(elem);
      a[(int) i] = elem;
      i += 1;
    }
  }

  for j=0 to (N % 1)
  {
    elem = a[(int) i];
    elem = __caddq(elem);
    a[(int) i] = elem;
    i += 1;
  }

  return a;
}//<>

inline fn __map1__challenge(reg ptr u32[256] a) -> reg ptr u32[256]
{
  return a;
}//<>
